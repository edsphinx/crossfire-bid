import * as dotenv from "dotenv";
dotenv.config();
import { Client, EscrowCreate, Wallet, isoTimeToRippleTime, validate } from "xrpl";

async function main() {
  // --- CONFIGURATION ---
  // WebSocket
  // wss://s.altnet.rippletest.net:51233/
  // JSON-RPC
  // https://s.altnet.rippletest.net:51234/
  const TESTNET_SERVER = "wss://s.altnet.rippletest.net:51233";

  // Replace with your sender's secret from the XRP Testnet Faucet
  const SENDER_SECRET = process.env.XRPL_SENDER_SECRET || "";
  // Replace with the receiver's address (another testnet account)
  const receiverAddress = process.env.RECEIVER_ADDRESS || "";

  // --- DATA FROM EVM SWAP ---
  // This is the hashlock generated by initiateCrossChainSwap.ts
  const HASH_LOCK = "bc56a649b00d7434ee0f72a3021aeac8541dd80ce331dab31090619bc4c1b052";
  // This is the secret (preimage) generated by initiateCrossChainSwap.ts
  // In a real scenario, the resolver would only know this after the EVM side is resolved.
  // For testing, we'll use it to claim the HTLC.
  const SECRET = "f11c3a3acb8ed830bc2bd3d3013dae50a992a7b04da98ddf2278c1f8416dc74c";

  console.log("Connecting to XRP Ledger Testnet...");
  const client = new Client(TESTNET_SERVER);
  await client.connect();
  console.log("Connected to Testnet.");

  if (!SENDER_SECRET) {
    throw new Error("SENDER_SECRET is not set in .env");
  }

  console.log("Preparing wallet");
  // 1. Get sender wallet from secret
  const senderWallet = Wallet.fromSeed(SENDER_SECRET);
  console.log(`Sender Address: ${senderWallet.address}`);
  console.log(`Receiver Address: ${receiverAddress}`);

  console.log("Preparing EscrowCreate transaction");
  // 2. Prepare the EscrowCreate transaction
  const amount = "1000"; // 1 XRP (in drops, 1 XRP = 1,000,000 drops)
  const deliveryDate = isoTimeToRippleTime(new Date(Date.now() + 3600 * 1000).toISOString()); // 1 hour from now
  console.log(`Delivery date: ${deliveryDate}`);
  console.log(`Amount: ${amount}`);
  const cancelAfter = isoTimeToRippleTime(new Date(Date.now() + 7200 * 1000).toISOString());
  try {
    console.log("[DEBUG] Getting current ledger index...");
    const ledger = await client.request({ command: "ledger", ledger_index: "validated" });
    const lastLedgerSequence = ledger.result.ledger_index + 10;
    console.log(
      `[DEBUG] Current ledger index: ${ledger.result.ledger_index}. Setting LastLedgerSequence to:     ${lastLedgerSequence}`,
    );
    console.log("Creating HTLC (Escrow)");
    const transaction: EscrowCreate = {
      TransactionType: "EscrowCreate",
      Account: senderWallet.address,
      Destination: receiverAddress,
      Amount: amount,
      DestinationTag: 2023,
      CancelAfter: cancelAfter,
      FinishAfter: deliveryDate,
      Fee: "12",
      Condition: HASH_LOCK.toUpperCase(),
    };
    console.log(transaction);
    // 3. Sign and submit the transaction
    console.log("Validating transaction...");
    try {
      const verifyValidation = await validate(transaction);
      console.log("Transaction is valid:", verifyValidation);
    } catch (error: any) {
      console.error("Error validating transaction:", error.message);
      return;
    }
    console.log("Transaction is validated.");

    // Sign and submit the transaction ----------------------------------------
    console.log("Signing and submitting the transaction:", JSON.stringify(transaction, null, "\t"), "\n");
    // console.log("[DEBUG] Submitting EscrowCreate transaction...");

    // console.log("[DEBUG] Preparing transaction (autofill)...");
    // const prepared = await client.autofill(transaction);

    // console.log("[DEBUG] Signing transaction...");
    // const signed = senderWallet.sign(prepared);

    console.log("[DEBUG] Submitting transaction and waiting for validation (this may take a moment)...");
    const response = await client.submitAndWait(transaction, { wallet: senderWallet });
    console.log("[DEBUG] Transaction submitted and validated.");

    console.log(`Sequence number: ${response.result.tx_json.Sequence}`);
    console.log(`Finished submitting! ${JSON.stringify(response.result, null, "\t")}`);

    // console.log("Transaction result:", result.result.meta?.TransactionResult?.Result);
    // console.log("Transaction hash:", signed.hash);
    // console.log("Escrow created successfully!");
    console.log("To claim this escrow, the receiver needs the secret (preimage): ", SECRET);
  } catch (error: any) {
    console.error("Error creating HTLC (Escrow):", error.message);
  }
  console.log("[DEBUG] Getting current ledger index...");
  const finalLedger = await client.request({ command: "ledger", ledger_index: "validated" });
  console.log(`[DEBUG] Current ledger index: ${finalLedger.result.ledger_index}.`);
  console.log("[DEBUG] Disconnecting from XRP Ledger Testnet...");
  await client.disconnect();
  console.log("[DEBUG] Disconnected.");
}

main().catch(error => {
  console.error(error);
  process.exitCode = 1;
});
