{
  "address": "0x0b9aD27E24A17e9cFE5eDD2455238612189F0A48",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWETH",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AdvanceEpochFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArbitraryStaticCallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BitInvalidatedOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochManagerAndBitInvalidatorsAreIncompatible",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EthDepositRejected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMsgValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPermit2Transfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidatedOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MakingAmountTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchArraysLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OrderExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OrderIsNotSuitableForMassInvalidation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PartialFillNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Permit2TransferAmountTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PredicateIsNotTrue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PrivateOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyDetected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RemainingInvalidatedOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferFromFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "res",
          "type": "bytes"
        }
      ],
      "name": "SimulationResults",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapWithZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TakingAmountExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TakingAmountTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromMakerToTakerFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromTakerToMakerFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongSeriesNonce",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotValue",
          "type": "uint256"
        }
      ],
      "name": "BitInvalidatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "series",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpoch",
          "type": "uint256"
        }
      ],
      "name": "EpochIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "OrderCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "series",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "advanceEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offsets",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "and",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "arbitraryStaticCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "bitInvalidatorForOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "MakerTraits",
          "name": "makerTraits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "additionalMask",
          "type": "uint256"
        }
      ],
      "name": "bitsInvalidateForOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "MakerTraits",
          "name": "makerTraits",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "MakerTraits[]",
          "name": "makerTraits",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "orderHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "cancelOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "predicate",
          "type": "bytes"
        }
      ],
      "name": "checkPredicate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "series",
          "type": "uint96"
        }
      ],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "series",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "makerEpoch",
          "type": "uint256"
        }
      ],
      "name": "epochEquals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "eq",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "maker",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "receiver",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "makerAsset",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "takerAsset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "MakerTraits",
              "name": "makerTraits",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "TakerTraits",
          "name": "takerTraits",
          "type": "uint256"
        }
      ],
      "name": "fillContractOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "maker",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "receiver",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "makerAsset",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "takerAsset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "MakerTraits",
              "name": "makerTraits",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "TakerTraits",
          "name": "takerTraits",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "fillContractOrderArgs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "maker",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "receiver",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "makerAsset",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "takerAsset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "MakerTraits",
              "name": "makerTraits",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "vs",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "TakerTraits",
          "name": "takerTraits",
          "type": "uint256"
        }
      ],
      "name": "fillOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "maker",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "receiver",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "makerAsset",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "takerAsset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "MakerTraits",
              "name": "makerTraits",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "vs",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "TakerTraits",
          "name": "takerTraits",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "fillOrderArgs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "gt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "maker",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "receiver",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "makerAsset",
              "type": "uint256"
            },
            {
              "internalType": "Address",
              "name": "takerAsset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "MakerTraits",
              "name": "makerTraits",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOrderMixin.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "hashOrder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "series",
          "type": "uint96"
        }
      ],
      "name": "increaseEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "lt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "not",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offsets",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "or",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "permit",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "action",
          "type": "bytes"
        }
      ],
      "name": "permitAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "rawRemainingInvalidatorForOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "remainingInvalidatorForOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "simulate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5a014337c35722279e1179ce1502109c4942631bb3a1f5ef39e8b316a8d66f61",
  "receipt": {
    "to": null,
    "from": "0x622DfAaf7443aA6fE0b6b106D3a68CAD0754b749",
    "contractAddress": "0x0b9aD27E24A17e9cFE5eDD2455238612189F0A48",
    "transactionIndex": 87,
    "gasUsed": "3542767",
    "logsBloom": "0x
    "blockHash": "0x5233d0a773df3d4a566a89cde27b36f103564e9c53c15457fc063f7134dcfe13",
    "transactionHash": "0x5a014337c35722279e1179ce1502109c4942631bb3a1f5ef39e8b316a8d66f61",
    "logs": [
      {
        "transactionIndex": 87,
        "blockNumber": 8854734,
        "transactionHash": "0x5a014337c35722279e1179ce1502109c4942631bb3a1f5ef39e8b316a8d66f61",
        "address": "0x0b9aD27E24A17e9cFE5eDD2455238612189F0A48",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000622dfaaf7443aa6fe0b6b106d3a68cad0754b749"
        ],
        "data": "0x",
        "logIndex": 181,
        "blockHash": "0x5233d0a773df3d4a566a89cde27b36f103564e9c53c15457fc063f7134dcfe13"
      }
    ],
    "blockNumber": 8854734,
    "cumulativeGasUsed": "11383055",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9d42A3E42eb5CC7D47DeE5f74E15f48f31A9a691"
  ],
  "numDeployments": 1,
  "solcInputHash": "151ca025e0eb3f6507b85580d4a552ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AdvanceEpochFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArbitraryStaticCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BitInvalidatedOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochManagerAndBitInvalidatorsAreIncompatible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthDepositRejected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMsgValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPermit2Transfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidatedOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MakingAmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchArraysLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderIsNotSuitableForMassInvalidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PartialFillNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Permit2TransferAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PredicateIsNotTrue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrivateOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyDetected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemainingInvalidatedOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFromFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"name\":\"SimulationResults\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapWithZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakingAmountExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakingAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromMakerToTakerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromTakerToMakerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongSeriesNonce\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotValue\",\"type\":\"uint256\"}],\"name\":\"BitInvalidatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpoch\",\"type\":\"uint256\"}],\"name\":\"EpochIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"series\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"advanceEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"and\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"arbitraryStaticCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"bitInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalMask\",\"type\":\"uint256\"}],\"name\":\"bitsInvalidateForOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits[]\",\"name\":\"makerTraits\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"orderHashes\",\"type\":\"bytes32[]\"}],\"name\":\"cancelOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"}],\"name\":\"checkPredicate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"series\",\"type\":\"uint96\"}],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerEpoch\",\"type\":\"uint256\"}],\"name\":\"epochEquals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"eq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"}],\"name\":\"fillContractOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"fillContractOrderArgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vs\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vs\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"fillOrderArgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"gt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"series\",\"type\":\"uint96\"}],\"name\":\"increaseEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"not\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"or\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"action\",\"type\":\"bytes\"}],\"name\":\"permitAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"rawRemainingInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"remainingInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"simulate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"BitInvalidatedOrder()\":[{\"details\":\"The error is thrown when an attempt is made to invalidate an already invalidated entity.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"EthDepositRejected()\":[{\"details\":\"Error thrown when an ETH deposit from an EOA is attempted.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"RemainingInvalidatedOrder()\":[{\"details\":\"The error is thrown when an attempt is made to invalidate an already invalidated entity.\"}]},\"events\":{\"BitInvalidatorUpdated(address,uint256,uint256)\":{\"params\":{\"maker\":\"Maker address\",\"slotIndex\":\"Slot index that was updated\",\"slotValue\":\"New slot value\"}},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"OrderCancelled(bytes32)\":{\"params\":{\"orderHash\":\"Hash of the order\"}},\"OrderFilled(bytes32,uint256)\":{\"params\":{\"orderHash\":\"Hash of the order\",\"remainingAmount\":\"Amount of the maker asset that remains to be filled\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator for the current chain (EIP-712)\"},\"and(uint256,bytes)\":{\"returns\":{\"_0\":\"Result True if calls to all targets returned True. Otherwise, false\"}},\"arbitraryStaticCall(address,bytes)\":{\"returns\":{\"_0\":\"Result Bytes transmuted to uint256\"}},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"epochEquals(address,uint256,uint256)\":{\"returns\":{\"_0\":\"Result True if `maker` has specified epoch. Otherwise, false\"}},\"eq(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns the same value as `value`. Otherwise, false\"}},\"gt(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is bigger than `value`. Otherwise, false\"}},\"lt(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is lower than `value`. Otherwise, false\"}},\"not(bytes)\":{\"returns\":{\"_0\":\"Result True if call to target returns 0. Otherwise, false\"}},\"or(uint256,bytes)\":{\"returns\":{\"_0\":\"Result True if call to any target returned True. Otherwise, false\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"permitAndCall(bytes,bytes)\":{\"params\":{\"action\":\"The data representing the action to be executed after the permit.\",\"permit\":\"ERC20 token address (20 bytes) concatenated with the permit data, allowing this contract to spend the token. Format: [token address (20 bytes)][permit data]\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"##1inch Limit Order Protocol v4\",\"version\":1},\"userdoc\":{\"events\":{\"BitInvalidatorUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when order with `useBitInvalidator` gets cancelled\"},\"OrderCancelled(bytes32)\":{\"notice\":\"Emitted when order without `useBitInvalidator` gets cancelled\"},\"OrderFilled(bytes32,uint256)\":{\"notice\":\"Emitted when order gets filled\"}},\"kind\":\"user\",\"methods\":{\"advanceEpoch(uint96,uint256)\":{\"notice\":\"Advances nonce by specified amount\"},\"and(uint256,bytes)\":{\"notice\":\"Calls every target with corresponding data\"},\"arbitraryStaticCall(address,bytes)\":{\"notice\":\"Performs an arbitrary call to target with data\"},\"bitInvalidatorForOrder(address,uint256)\":{\"notice\":\"See {IOrderMixin-bitInvalidatorForOrder}.\"},\"bitsInvalidateForOrder(uint256,uint256)\":{\"notice\":\"See {IOrderMixin-bitsInvalidateForOrder}.\"},\"cancelOrder(uint256,bytes32)\":{\"notice\":\"See {IOrderMixin-cancelOrder}.\"},\"cancelOrders(uint256[],bytes32[])\":{\"notice\":\"See {IOrderMixin-cancelOrders}.\"},\"checkPredicate(bytes)\":{\"notice\":\"See {IOrderMixin-checkPredicate}.\"},\"epoch(address,uint96)\":{\"notice\":\"Returns nonce for `maker` and `series`\"},\"epochEquals(address,uint256,uint256)\":{\"notice\":\"Checks if `maker` has specified `makerEpoch` for `series`\"},\"eq(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's equal to the value\"},\"fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)\":{\"notice\":\"See {IOrderMixin-fillContractOrder}.\"},\"fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)\":{\"notice\":\"See {IOrderMixin-fillContractOrderArgs}.\"},\"fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)\":{\"notice\":\"See {IOrderMixin-fillOrder}.\"},\"fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)\":{\"notice\":\"See {IOrderMixin-fillOrderArgs}.\"},\"gt(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's bigger than value\"},\"hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"See {IOrderMixin-hashOrder}.\"},\"increaseEpoch(uint96)\":{\"notice\":\"Advances nonce by one\"},\"lt(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's lower than value\"},\"not(bytes)\":{\"notice\":\"Calls target with specified data and tests if it's equal to 0\"},\"or(uint256,bytes)\":{\"notice\":\"Calls every target with corresponding data\"},\"pause()\":{\"notice\":\"Pauses all the trading functionality in the contract.\"},\"permitAndCall(bytes,bytes)\":{\"notice\":\"Executes a permit for an ERC20 token and then a specified action in a single transaction.\"},\"rawRemainingInvalidatorForOrder(address,bytes32)\":{\"notice\":\"See {IOrderMixin-rawRemainingInvalidatorForOrder}.\"},\"remainingInvalidatorForOrder(address,bytes32)\":{\"notice\":\"See {IOrderMixin-remainingInvalidatorForOrder}.\"},\"simulate(address,bytes)\":{\"notice\":\"See {IOrderMixin-simulate}.\"},\"unpause()\":{\"notice\":\"Unpauses all the trading functionality in the contract.\"}},\"notice\":\"Limit order protocol provides two different order types - Regular Limit Order - RFQ Order Both types provide similar order-fulfilling functionality. The difference is that regular order offers more customization options and features, while RFQ order is extremely gas efficient but without ability to customize. Regular limit order additionally supports - Execution predicates. Conditions for order execution are set with predicates. For example, expiration timestamp or block number, price for stop loss or take profit strategies. - Callbacks to notify maker on order execution See [OrderMixin](OrderMixin.md) for more details. RFQ orders supports - Expiration time - Cancelation by order id - Partial Fill (only once) See [OrderMixin](OrderMixin.md) for more details.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/1inch/limit-order-protocol/LimitOrderProtocol.sol\":\"LimitOrderProtocol\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@1inch/solidity-utils/contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IDaiLikePermit\\n * @dev Interface for Dai-like permit function allowing token spending via signatures.\\n */\\ninterface IDaiLikePermit {\\n    /**\\n     * @notice Approves spending of tokens via off-chain signatures.\\n     * @param holder Token holder's address.\\n     * @param spender Spender's address.\\n     * @param nonce Current nonce of the holder.\\n     * @param expiry Time when the permit expires.\\n     * @param allowed True to allow, false to disallow spending.\\n     * @param v, r, s Signature components.\\n     */\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf8636c1c4631641c7b40ac65cd69e6ae04a99cf3358426c642dec02c6c774c82\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IERC7597Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IERC7597Permit\\n * @dev A new extension for ERC-2612 permit, which has already been added to USDC v2.2.\\n */\\ninterface IERC7597Permit {\\n    /**\\n     * @notice Update allowance with a signed permit.\\n     * @dev Signature bytes can be used for both EOA wallets and contract wallets.\\n     * @param owner Token owner's address (Authorizer).\\n     * @param spender Spender's address.\\n     * @param value Amount of allowance.\\n     * @param deadline The time at which the signature expires (unixtime).\\n     * @param signature Unstructured bytes signature signed by an EOA wallet or a contract wallet.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external;\\n}\\n\",\"keccak256\":\"0xaf148ecd4db0f44989a7417f6945bcfd18273c5096bc2b364e314e42c85c78cd\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IPermit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPermit2\\n * @dev Interface for a flexible permit system that extends ERC20 tokens to support permits in tokens lacking native permit functionality.\\n */\\ninterface IPermit2 {\\n    /**\\n     * @dev Struct for holding permit details.\\n     * @param token ERC20 token address for which the permit is issued.\\n     * @param amount The maximum amount allowed to spend.\\n     * @param expiration Timestamp until which the permit is valid.\\n     * @param nonce An incrementing value for each signature, unique per owner, token, and spender.\\n     */\\n    struct PermitDetails {\\n        address token;\\n        uint160 amount;\\n        uint48 expiration;\\n        uint48 nonce;\\n    }\\n\\n    /**\\n     * @dev Struct for a single token allowance permit.\\n     * @param details Permit details including token, amount, expiration, and nonce.\\n     * @param spender Address authorized to spend the tokens.\\n     * @param sigDeadline Deadline for the permit signature, ensuring timeliness of the permit.\\n     */\\n    struct PermitSingle {\\n        PermitDetails details;\\n        address spender;\\n        uint256 sigDeadline;\\n    }\\n\\n    /**\\n     * @dev Struct for packed allowance data to optimize storage.\\n     * @param amount Amount allowed.\\n     * @param expiration Permission expiry timestamp.\\n     * @param nonce Unique incrementing value for tracking allowances.\\n     */\\n    struct PackedAllowance {\\n        uint160 amount;\\n        uint48 expiration;\\n        uint48 nonce;\\n    }\\n\\n    /**\\n     * @notice Executes a token transfer from one address to another.\\n     * @param user The token owner's address.\\n     * @param spender The address authorized to spend the tokens.\\n     * @param amount The amount of tokens to transfer.\\n     * @param token The address of the token being transferred.\\n     */\\n    function transferFrom(address user, address spender, uint160 amount, address token) external;\\n\\n    /**\\n     * @notice Issues a permit for spending tokens via a signed authorization.\\n     * @param owner The token owner's address.\\n     * @param permitSingle Struct containing the permit details.\\n     * @param signature The signature proving the owner authorized the permit.\\n     */\\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\n\\n    /**\\n     * @notice Retrieves the allowance details between a token owner and spender.\\n     * @param user The token owner's address.\\n     * @param token The token address.\\n     * @param spender The spender's address.\\n     * @return The packed allowance details.\\n     */\\n    function allowance(address user, address token, address spender) external view returns (PackedAllowance memory);\\n\\n    /**\\n     * @notice Approves the spender to use up to amount of the specified token up until the expiration\\n     * @param token The token to approve\\n     * @param spender The spender address to approve\\n     * @param amount The approved amount of the token\\n     * @param expiration The timestamp at which the approval is no longer valid\\n     * @dev The packed allowance also holds a nonce, which will stay unchanged in approve\\n     * @dev Setting amount to type(uint160).max sets an unlimited approval\\n     */\\n    function approve(address token, address spender, uint160 amount, uint48 expiration) external;\\n}\\n\",\"keccak256\":\"0x2ac37c62bb4a4941c1d353df6ac08750542c540234aa24409ac67373651a478a\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IWETH\\n * @dev Interface for wrapper as WETH-like token.\\n */\\ninterface IWETH is IERC20 {\\n    /**\\n     * @notice Emitted when Ether is deposited to get wrapper tokens.\\n     */\\n    event Deposit(address indexed dst, uint256 wad);\\n\\n    /**\\n     * @notice Emitted when wrapper tokens is withdrawn as Ether.\\n     */\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    /**\\n     * @notice Deposit Ether to get wrapper tokens.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice Withdraw wrapped tokens as Ether.\\n     * @param amount Amount of wrapped tokens to withdraw.\\n     */\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x32989b79850e8a1ac6aab74878de2883f9537656ca06910dc0ae76833cc446e2\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/AddressLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ntype Address is uint256;\\n\\n/**\\n* @notice AddressLib\\n* @notice Library for working with addresses encoded as uint256 values, which can include flags in the highest bits.\\n*/\\nlibrary AddressLib {\\n    uint256 private constant _LOW_160_BIT_MASK = (1 << 160) - 1;\\n\\n    /**\\n    * @notice Returns the address representation of a uint256.\\n    * @param a The uint256 value to convert to an address.\\n    * @return The address representation of the provided uint256 value.\\n    */\\n    function get(Address a) internal pure returns (address) {\\n        return address(uint160(Address.unwrap(a) & _LOW_160_BIT_MASK));\\n    }\\n\\n    /**\\n    * @notice Checks if a given flag is set for the provided address.\\n    * @param a The address to check for the flag.\\n    * @param flag The flag to check for in the provided address.\\n    * @return True if the provided flag is set in the address, false otherwise.\\n    */\\n    function getFlag(Address a, uint256 flag) internal pure returns (bool) {\\n        return (Address.unwrap(a) & flag) != 0;\\n    }\\n\\n    /**\\n    * @notice Returns a uint32 value stored at a specific bit offset in the provided address.\\n    * @param a The address containing the uint32 value.\\n    * @param offset The bit offset at which the uint32 value is stored.\\n    * @return The uint32 value stored in the address at the specified bit offset.\\n    */\\n    function getUint32(Address a, uint256 offset) internal pure returns (uint32) {\\n        return uint32(Address.unwrap(a) >> offset);\\n    }\\n\\n    /**\\n    * @notice Returns a uint64 value stored at a specific bit offset in the provided address.\\n    * @param a The address containing the uint64 value.\\n    * @param offset The bit offset at which the uint64 value is stored.\\n    * @return The uint64 value stored in the address at the specified bit offset.\\n    */\\n    function getUint64(Address a, uint256 offset) internal pure returns (uint64) {\\n        return uint64(Address.unwrap(a) >> offset);\\n    }\\n}\\n\",\"keccak256\":\"0xe860b410ed5371b9732daab80982eef0a42ae48474716a89725ca744e27b7d75\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @title ECDSA signature operations\\n * @notice Provides functions for recovering addresses from signatures and verifying signatures, including support for EIP-2098 compact signatures.\\n */\\nlibrary ECDSA {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    uint256 private constant _S_BOUNDARY = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 + 1;\\n    uint256 private constant _COMPACT_S_MASK = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    uint256 private constant _COMPACT_V_SHIFT = 255;\\n\\n    /**\\n     * @notice Recovers the signer's address from the signature.\\n     * @dev Recovers the address that has signed a hash with `(v, r, s)` signature.\\n     * @param hash The keccak256 hash of the data signed.\\n     * @param v The recovery byte of the signature.\\n     * @param r The first 32 bytes of the signature.\\n     * @param s The second 32 bytes of the signature.\\n     * @return signer The address of the signer.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (address signer) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            if lt(s, _S_BOUNDARY) {\\n                let ptr := mload(0x40)\\n\\n                mstore(ptr, hash)\\n                mstore(add(ptr, 0x20), v)\\n                mstore(add(ptr, 0x40), r)\\n                mstore(add(ptr, 0x60), s)\\n                mstore(0, 0)\\n                pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                signer := mload(0)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Recovers the signer's address from the signature using `r` and `vs` components.\\n     * @dev Recovers the address that has signed a hash with `r` and `vs`, where `vs` combines `v` and `s`.\\n     * @param hash The keccak256 hash of the data signed.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The combined `v` and `s` values of the signature.\\n     * @return signer The address of the signer.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (address signer) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let s := and(vs, _COMPACT_S_MASK)\\n            if lt(s, _S_BOUNDARY) {\\n                let ptr := mload(0x40)\\n\\n                mstore(ptr, hash)\\n                mstore(add(ptr, 0x20), add(27, shr(_COMPACT_V_SHIFT, vs)))\\n                mstore(add(ptr, 0x40), r)\\n                mstore(add(ptr, 0x60), s)\\n                mstore(0, 0)\\n                pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                signer := mload(0)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Recovers the signer's address from a hash and a signature.\\n     * @param hash The keccak256 hash of the signed data.\\n     * @param signature The full signature from which the signer will be recovered.\\n     * @return signer The address of the signer.\\n     */\\n    /// @dev WARNING!!!\\n    /// There is a known signature malleability issue with two representations of signatures!\\n    /// Even though this function is able to verify both standard 65-byte and compact 64-byte EIP-2098 signatures\\n    /// one should never use raw signatures for any kind of invalidation logic in their code.\\n    /// As the standard and compact representations are interchangeable any invalidation logic that relies on\\n    /// signature uniqueness will get rekt.\\n    /// More info: https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-4h98-2769-gh6h\\n    function recover(bytes32 hash, bytes calldata signature) internal view returns (address signer) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            // memory[ptr:ptr+0x80] = (hash, v, r, s)\\n            switch signature.length\\n            case 65 {\\n                // memory[ptr+0x20:ptr+0x80] = (v, r, s)\\n                mstore(add(ptr, 0x20), byte(0, calldataload(add(signature.offset, 0x40))))\\n                calldatacopy(add(ptr, 0x40), signature.offset, 0x40)\\n            }\\n            case 64 {\\n                // memory[ptr+0x20:ptr+0x80] = (v, r, s)\\n                let vs := calldataload(add(signature.offset, 0x20))\\n                mstore(add(ptr, 0x20), add(27, shr(_COMPACT_V_SHIFT, vs)))\\n                calldatacopy(add(ptr, 0x40), signature.offset, 0x20)\\n                mstore(add(ptr, 0x60), and(vs, _COMPACT_S_MASK))\\n            }\\n            default {\\n                ptr := 0\\n            }\\n\\n            if ptr {\\n                if lt(mload(add(ptr, 0x60)), _S_BOUNDARY) {\\n                    // memory[ptr:ptr+0x20] = (hash)\\n                    mstore(ptr, hash)\\n\\n                    mstore(0, 0)\\n                    pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                    signer := mload(0)\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies the signature for a hash, either by recovering the signer or using EIP-1271's `isValidSignature` function.\\n     * @dev Attempts to recover the signer's address from the signature; if the address is non-zero, checks if it's valid according to EIP-1271.\\n     * @param signer The address to validate the signature against.\\n     * @param hash The hash of the signed data.\\n     * @param signature The signature to verify.\\n     * @return success True if the signature is verified, false otherwise.\\n     */\\n    function recoverOrIsValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes calldata signature\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if ((signature.length == 64 || signature.length == 65) && recover(hash, signature) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @notice Verifies the signature for a hash, either by recovering the signer or using EIP-1271's `isValidSignature` function.\\n     * @dev Attempts to recover the signer's address from the signature; if the address is non-zero, checks if it's valid according to EIP-1271.\\n     * @param signer The address to validate the signature against.\\n     * @param hash The hash of the signed data.\\n     * @param v The recovery byte of the signature.\\n     * @param r The first 32 bytes of the signature.\\n     * @param s The second 32 bytes of the signature.\\n     * @return success True if the signature is verified, false otherwise.\\n     */\\n    function recoverOrIsValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, v, r, s) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, v, r, s);\\n    }\\n\\n    /**\\n     * @notice Verifies the signature for a hash, either by recovering the signer or using EIP-1271's `isValidSignature` function.\\n     * @dev Attempts to recover the signer's address from the signature; if the address is non-zero, checks if it's valid according to EIP-1271.\\n     * @param signer The address to validate the signature against.\\n     * @param hash The hash of the signed data.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The combined `v` and `s` values of the signature.\\n     * @return success True if the signature is verified, false otherwise.\\n     */\\n    function recoverOrIsValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, r, vs) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, r, vs);\\n    }\\n\\n    /**\\n     * @notice Verifies the signature for a given hash, attempting to recover the signer's address or validates it using EIP-1271 for 65-byte signatures.\\n     * @dev Attempts to recover the signer's address from the signature. If the address is a contract, checks if the signature is valid according to EIP-1271.\\n     * @param signer The expected signer's address.\\n     * @param hash The keccak256 hash of the signed data.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The last 32 bytes of the signature, with the last byte being the recovery id.\\n     * @return success True if the signature is valid, false otherwise.\\n     */\\n    function recoverOrIsValidSignature65(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, r, vs) == signer) {\\n            return true;\\n        }\\n        return isValidSignature65(signer, hash, r, vs);\\n    }\\n\\n    /**\\n     * @notice Validates a signature for a hash using EIP-1271, if `signer` is a contract.\\n     * @dev Makes a static call to `signer` with `isValidSignature` function selector from EIP-1271.\\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\\n     * @param hash The hash of the signed data.\\n     * @param signature The signature to validate.\\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\\n     */\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes calldata signature\\n    ) internal view returns (bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature));\\n        // return success && data.length == 32 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), signature.length)\\n            calldatacopy(add(ptr, 0x64), signature.offset, signature.length)\\n            if staticcall(gas(), signer, ptr, add(0x64, signature.length), 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates a signature for a hash using EIP-1271, if `signer` is a contract.\\n     * @dev Makes a static call to `signer` with `isValidSignature` function selector from EIP-1271.\\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\\n     * @param hash The hash of the signed data.\\n     * @param v The recovery byte of the signature.\\n     * @param r The first 32 bytes of the signature.\\n     * @param s The second 32 bytes of the signature.\\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\\n     */\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool success) {\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 65)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), s)\\n            mstore8(add(ptr, 0xa4), v)\\n            if staticcall(gas(), signer, ptr, 0xa5, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates a signature for a hash using EIP-1271, if `signer` is a contract.\\n     * @dev Makes a static call to `signer` with `isValidSignature` function selector from EIP-1271.\\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\\n     * @param hash The hash of the signed data.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The last 32 bytes of the signature, with the last byte being the recovery id.\\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\\n     */\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, abi.encodePacked(r, vs)));\\n        // return success && data.length == 32 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 64)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), vs)\\n            if staticcall(gas(), signer, ptr, 0xa4, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies if a 65-byte signature is valid for a given hash, according to EIP-1271.\\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\\n     * @param hash The hash of the signed data.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The combined `v` (recovery id) and `s` component of the signature, packed into the last 32 bytes.\\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\\n     */\\n    function isValidSignature65(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, abi.encodePacked(r, vs & ~uint256(1 << 255), uint8(vs >> 255))));\\n        // return success && data.length == 32 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 65)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), and(vs, _COMPACT_S_MASK))\\n            mstore8(add(ptr, 0xa4), add(27, shr(_COMPACT_V_SHIFT, vs)))\\n            if staticcall(gas(), signer, ptr, 0xa5, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Generates a hash compatible with Ethereum's signed message format.\\n     * @dev Prepends the hash with Ethereum's message prefix before hashing it.\\n     * @param hash The hash of the data to sign.\\n     * @return res The Ethereum signed message hash.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 res) {\\n        // 32 is the length in bytes of hash, enforced by the type signature above\\n        // return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            mstore(0, 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000) // \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n            mstore(28, hash)\\n            res := keccak256(0, 60)\\n        }\\n    }\\n\\n    /**\\n     * @notice Generates an EIP-712 compliant hash.\\n     * @dev Encodes the domain separator and the struct hash according to EIP-712.\\n     * @param domainSeparator The EIP-712 domain separator.\\n     * @param structHash The EIP-712 struct hash.\\n     * @return res The EIP-712 compliant hash.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 res) {\\n        // return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x1901000000000000000000000000000000000000000000000000000000000000) // \\\"\\\\x19\\\\x01\\\"\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            res := keccak256(ptr, 66)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x501b8b300cf98af055d4bb26eb936ec8cb8aac7cde5caae9c2d045a43d15c5e5\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/RevertReasonForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title RevertReasonForwarder\\n * @notice Provides utilities for forwarding and retrieving revert reasons from failed external calls.\\n */\\nlibrary RevertReasonForwarder {\\n    /**\\n     * @dev Forwards the revert reason from the latest external call.\\n     * This method allows propagating the revert reason of a failed external call to the caller.\\n     */\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves the revert reason from the latest external call.\\n     * This method enables capturing the revert reason of a failed external call for inspection or processing.\\n     * @return reason The latest external call revert reason.\\n     */\\n    function reReason() internal pure returns (bytes memory reason) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            reason := mload(0x40)\\n            let length := returndatasize()\\n            mstore(reason, length)\\n            returndatacopy(add(reason, 0x20), 0, length)\\n            mstore(0x40, add(reason, add(0x20, length)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97d8c950981f4da44ae1b01d9e597c4f99377797ec7ff7b1ef9648e4ecc1baa4\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"../interfaces/IPermit2.sol\\\";\\nimport \\\"../interfaces/IERC7597Permit.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/RevertReasonForwarder.sol\\\";\\n\\n/**\\n * @title Implements efficient safe methods for ERC20 interface.\\n * @notice Compared to the standard ERC20, this implementation offers several enhancements:\\n * 1. more gas-efficient, providing significant savings in transaction costs.\\n * 2. support for different permit implementations\\n * 3. forceApprove functionality\\n * 4. support for WETH deposit and withdraw\\n */\\nlibrary SafeERC20 {\\n    error SafeTransferFailed();\\n    error SafeTransferFromFailed();\\n    error ForceApproveFailed();\\n    error SafeIncreaseAllowanceFailed();\\n    error SafeDecreaseAllowanceFailed();\\n    error SafePermitBadLength();\\n    error Permit2TransferAmountTooHigh();\\n\\n    // Uniswap Permit2 address\\n    address private constant _PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n    address private constant _PERMIT2_ZKSYNC = 0x0000000000225e31D15943971F47aD3022F714Fa;\\n    bytes4 private constant _PERMIT_LENGTH_ERROR = 0x68275857;  // SafePermitBadLength.selector\\n\\n    /**\\n     * @notice Fetches the balance of a specific ERC20 token held by an account.\\n     * Consumes less gas then regular `ERC20.balanceOf`.\\n     * @dev Note that the implementation does not perform dirty bits cleaning, so it is the\\n     * responsibility of the caller to make sure that the higher 96 bits of the `account` parameter are clean.\\n     * @param token The IERC20 token contract for which the balance will be fetched.\\n     * @param account The address of the account whose token balance will be fetched.\\n     * @return tokenBalance The balance of the specified ERC20 token held by the account.\\n     */\\n    function safeBalanceOf(\\n        IERC20 token,\\n        address account\\n    ) internal view returns(uint256 tokenBalance) {\\n        bytes4 selector = IERC20.balanceOf.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            mstore(0x00, selector)\\n            mstore(0x04, account)\\n            let success := staticcall(gas(), token, 0x00, 0x24, 0x00, 0x20)\\n            tokenBalance := mload(0)\\n\\n            if or(iszero(success), lt(returndatasize(), 0x20)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another.\\n     * @dev If permit2 is true, uses the Permit2 standard; otherwise uses the standard ERC20 transferFrom.\\n     * Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     * @param permit2 If true, uses the Permit2 standard for the transfer; otherwise uses the standard ERC20 transferFrom.\\n     */\\n    function safeTransferFromUniversal(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool permit2\\n    ) internal {\\n        if (permit2) {\\n            safeTransferFromPermit2(token, from, to, amount);\\n        } else {\\n            safeTransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another using the ERC20 standard.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = token.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            success := call(gas(), token, 0, data, 0x64, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another using the Permit2 standard.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFromPermit2(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > type(uint160).max) revert Permit2TransferAmountTooHigh();\\n        address permit2 = _getPermit2Address();\\n        bytes4 selector = IPermit2.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            mstore(add(data, 0x64), token)\\n            success := call(gas(), permit2, 0, data, 0x84, 0x0, 0x0)\\n            if success {\\n                success := gt(extcodesize(permit2), 0)\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens to another address.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `to` parameter are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (!_makeCall(token, token.transfer.selector, to, amount)) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to approve a spender to spend a certain amount of tokens.\\n     * @dev If `approve(from, to, amount)` fails, it tries to set the allowance to zero, and retries the `approve` call.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\\n            if (\\n                !_makeCall(token, token.approve.selector, spender, 0) ||\\n                !_makeCall(token, token.approve.selector, spender, value)\\n            ) {\\n                revert ForceApproveFailed();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely increases the allowance of a spender.\\n     * @dev Increases with safe math check. Checks if the increased allowance will overflow, if yes, then it reverts the transaction.\\n     * Then uses `forceApprove` to increase the allowance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to increase the allowance by.\\n     */\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance + value);\\n    }\\n\\n    /**\\n     * @notice Safely decreases the allowance of a spender.\\n     * @dev Decreases with safe math check. Checks if the decreased allowance will underflow, if yes, then it reverts the transaction.\\n     * Then uses `forceApprove` to increase the allowance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to decrease the allowance by.\\n     */\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance - value);\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with the sender and contract as parameters.\\n     * Permit type is determined automatically based on permit calldata (IERC20Permit, IDaiLikePermit, and IPermit2).\\n     * @dev Wraps `tryPermit` function and forwards revert reason if permit fails.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param permit The permit data to be used in the function call.\\n     */\\n    function safePermit(IERC20 token, bytes calldata permit) internal {\\n        if (!tryPermit(token, msg.sender, address(this), permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with custom owner and spender parameters.\\n     * Permit type is determined automatically based on permit calldata (IERC20Permit, IDaiLikePermit, and IPermit2).\\n     * @dev Wraps `tryPermit` function and forwards revert reason if permit fails.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `owner` and `spender` parameters are clean.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param owner The owner of the tokens for which the permit is made.\\n     * @param spender The spender allowed to spend the tokens by the permit.\\n     * @param permit The permit data to be used in the function call.\\n     */\\n    function safePermit(IERC20 token, address owner, address spender, bytes calldata permit) internal {\\n        if (!tryPermit(token, owner, spender, permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with the sender and contract as parameters.\\n     * @dev Invokes `tryPermit` with sender as owner and contract as spender.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param permit The permit data to be used in the function call.\\n     * @return success Returns true if the permit function was successfully executed, false otherwise.\\n     */\\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool success) {\\n        return tryPermit(token, msg.sender, address(this), permit);\\n    }\\n\\n    /**\\n     * @notice The function attempts to call the permit function on a given ERC20 token.\\n     * @dev The function is designed to support a variety of permit functions, namely: IERC20Permit, IDaiLikePermit, IERC7597Permit and IPermit2.\\n     * It accommodates both Compact and Full formats of these permit types.\\n     * Please note, it is expected that the `expiration` parameter for the compact Permit2 and the `deadline` parameter\\n     * for the compact Permit are to be incremented by one before invoking this function. This approach is motivated by\\n     * gas efficiency considerations; as the unlimited expiration period is likely to be the most common scenario, and\\n     * zeros are cheaper to pass in terms of gas cost. Thus, callers should increment the expiration or deadline by one\\n     * before invocation for optimized performance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `owner` and `spender` parameters are clean.\\n     * @param token The address of the ERC20 token on which to call the permit function.\\n     * @param owner The owner of the tokens. This address should have signed the off-chain permit.\\n     * @param spender The address which will be approved for transfer of tokens.\\n     * @param permit The off-chain permit data, containing different fields depending on the type of permit function.\\n     * @return success A boolean indicating whether the permit call was successful.\\n     */\\n    function tryPermit(IERC20 token, address owner, address spender, bytes calldata permit) internal returns(bool success) {\\n        address permit2 = _getPermit2Address();\\n        // load function selectors for different permit standards\\n        bytes4 permitSelector = IERC20Permit.permit.selector;\\n        bytes4 daiPermitSelector = IDaiLikePermit.permit.selector;\\n        bytes4 permit2Selector = IPermit2.permit.selector;\\n        bytes4 erc7597PermitSelector = IERC7597Permit.permit.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            // Switch case for different permit lengths, indicating different permit standards\\n            switch permit.length\\n            // Compact IERC20Permit\\n            case 100 {\\n                mstore(ptr, permitSelector)     // store selector\\n                mstore(add(ptr, 0x04), owner)   // store owner\\n                mstore(add(ptr, 0x24), spender) // store spender\\n\\n                // Compact IERC20Permit.permit(uint256 value, uint32 deadline, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let deadline := shr(224, calldataload(add(permit.offset, 0x20))) // loads permit.offset 0x20..0x23\\n                    let vs := calldataload(add(permit.offset, 0x44))                 // loads permit.offset 0x44..0x63\\n\\n                    calldatacopy(add(ptr, 0x44), permit.offset, 0x20)            // store value     = copy permit.offset 0x00..0x19\\n                    mstore(add(ptr, 0x64), sub(deadline, 1))                     // store deadline  = deadline - 1\\n                    mstore(add(ptr, 0x84), add(27, shr(255, vs)))                // store v         = most significant bit of vs + 27 (27 or 28)\\n                    calldatacopy(add(ptr, 0xa4), add(permit.offset, 0x24), 0x20) // store r         = copy permit.offset 0x24..0x43\\n                    mstore(add(ptr, 0xc4), shr(1, shl(1, vs)))                   // store s         = vs without most significant bit\\n                }\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            // Compact IDaiLikePermit\\n            case 72 {\\n                mstore(ptr, daiPermitSelector)  // store selector\\n                mstore(add(ptr, 0x04), owner)   // store owner\\n                mstore(add(ptr, 0x24), spender) // store spender\\n\\n                // Compact IDaiLikePermit.permit(uint32 nonce, uint32 expiry, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let expiry := shr(224, calldataload(add(permit.offset, 0x04))) // loads permit.offset 0x04..0x07\\n                    let vs := calldataload(add(permit.offset, 0x28))               // loads permit.offset 0x28..0x47\\n\\n                    mstore(add(ptr, 0x44), shr(224, calldataload(permit.offset))) // store nonce   = copy permit.offset 0x00..0x03\\n                    mstore(add(ptr, 0x64), sub(expiry, 1))                        // store expiry  = expiry - 1\\n                    mstore(add(ptr, 0x84), true)                                  // store allowed = true\\n                    mstore(add(ptr, 0xa4), add(27, shr(255, vs)))                 // store v       = most significant bit of vs + 27 (27 or 28)\\n                    calldatacopy(add(ptr, 0xc4), add(permit.offset, 0x08), 0x20)  // store r       = copy permit.offset 0x08..0x27\\n                    mstore(add(ptr, 0xe4), shr(1, shl(1, vs)))                    // store s       = vs without most significant bit\\n                }\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            // IERC20Permit\\n            case 224 {\\n                mstore(ptr, permitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            // IDaiLikePermit\\n            case 256 {\\n                mstore(ptr, daiPermitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            // Compact IPermit2\\n            case 96 {\\n                // Compact IPermit2.permit(uint160 amount, uint32 expiration, uint32 nonce, uint32 sigDeadline, uint256 r, uint256 vs)\\n                mstore(ptr, permit2Selector)  // store selector\\n                mstore(add(ptr, 0x04), owner) // store owner\\n                mstore(add(ptr, 0x24), token) // store token\\n\\n                calldatacopy(add(ptr, 0x50), permit.offset, 0x14)             // store amount = copy permit.offset 0x00..0x13\\n                // and(0xffffffffffff, ...) - conversion to uint48\\n                mstore(add(ptr, 0x64), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x14))), 1))) // store expiration = ((permit.offset 0x14..0x17 - 1) & 0xffffffffffff)\\n                mstore(add(ptr, 0x84), shr(224, calldataload(add(permit.offset, 0x18)))) // store nonce = copy permit.offset 0x18..0x1b\\n                mstore(add(ptr, 0xa4), spender)                               // store spender\\n                // and(0xffffffffffff, ...) - conversion to uint48\\n                mstore(add(ptr, 0xc4), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x1c))), 1))) // store sigDeadline = ((permit.offset 0x1c..0x1f - 1) & 0xffffffffffff)\\n                mstore(add(ptr, 0xe4), 0x100)                                 // store offset = 256\\n                mstore(add(ptr, 0x104), 0x40)                                 // store length = 64\\n                calldatacopy(add(ptr, 0x124), add(permit.offset, 0x20), 0x20) // store r      = copy permit.offset 0x20..0x3f\\n                calldatacopy(add(ptr, 0x144), add(permit.offset, 0x40), 0x20) // store vs     = copy permit.offset 0x40..0x5f\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), permit2, 0, ptr, 0x164, 0, 0)\\n            }\\n            // IPermit2\\n            case 352 {\\n                mstore(ptr, permit2Selector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), permit2, 0, ptr, 0x164, 0, 0)\\n            }\\n            // Dynamic length\\n            default {\\n                mstore(ptr, erc7597PermitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IERC7597Permit.permit(address owner, address spender, uint256 value, uint256 deadline, bytes memory signature)\\n                success := call(gas(), token, 0, ptr, add(permit.length, 4), 0, 0)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes a low level call to a token contract, making it resistant to reversion and erroneous boolean returns.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param selector The function signature that is to be called on the token contract.\\n     * @param to The address to which the token amount will be transferred.\\n     * @param amount The token amount to be transferred.\\n     * @return success A boolean indicating if the call was successful. Returns 'true' on success and 'false' on failure.\\n     * In case of success but no returned data, validates that the contract code exists.\\n     * In case of returned data, ensures that it's a boolean `true`.\\n     */\\n    function _makeCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), to)\\n            mstore(add(data, 0x24), amount)\\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely deposits a specified amount of Ether into the IWETH contract. Consumes less gas then regular `IWETH.deposit`.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of Ether to deposit into the IWETH contract.\\n     */\\n    function safeDeposit(IWETH weth, uint256 amount) internal {\\n        bytes4 selector = IWETH.deposit.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            mstore(0, selector)\\n            if iszero(call(gas(), weth, amount, 0, 4, 0, 0)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely withdraws a specified amount of wrapped Ether from the IWETH contract. Consumes less gas then regular `IWETH.withdraw`.\\n     * @dev Uses inline assembly to interact with the IWETH contract.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of wrapped Ether to withdraw from the IWETH contract.\\n     */\\n    function safeWithdraw(IWETH weth, uint256 amount) internal {\\n        bytes4 selector = IWETH.withdraw.selector;\\n        assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n            mstore(0, selector)\\n            mstore(4, amount)\\n            if iszero(call(gas(), weth, 0, 0, 0x24, 0, 0)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely withdraws a specified amount of wrapped Ether from the IWETH contract to a specified recipient.\\n     * Consumes less gas then regular `IWETH.withdraw`.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of wrapped Ether to withdraw from the IWETH contract.\\n     * @param to The recipient of the withdrawn Ether.\\n     */\\n    function safeWithdrawTo(IWETH weth, uint256 amount, address to) internal {\\n        safeWithdraw(weth, amount);\\n        if (to != address(this)) {\\n            assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n                if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                    let ptr := mload(0x40)\\n                    returndatacopy(ptr, 0, returndatasize())\\n                    revert(ptr, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getPermit2Address() private view returns (address permit2) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            switch chainid()\\n            case 324 { // zksync mainnet\\n                permit2 := _PERMIT2_ZKSYNC\\n            }\\n            case 300 { // zksync testnet\\n                permit2 := _PERMIT2_ZKSYNC\\n            }\\n            case 260 { // zksync fork network\\n                permit2 := _PERMIT2_ZKSYNC\\n            }\\n            default {\\n                permit2 := _PERMIT2\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc756a120ac3a0271cdfd89db133335deaf31523a06a91ff00eb2be8656e9f85a\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/mixins/EthReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title EthReceiver\\n * @dev Abstract contract for rejecting direct ETH transfers from EOAs.\\n * Implements a custom error and logic to reject ETH deposits from non-contract addresses.\\n */\\nabstract contract EthReceiver {\\n    /// @dev Error thrown when an ETH deposit from an EOA is attempted.\\n    error EthDepositRejected();\\n\\n    /// @dev External payable function to receive ETH, automatically rejects deposits from EOAs.\\n    receive() external payable {\\n        _receive();\\n    }\\n\\n    /**\\n     * @dev Internal function containing the logic to reject ETH deposits.\\n     * Can be overridden by derived contracts for specific behaviors while maintaining the base rejection mechanism.\\n     */\\n    function _receive() internal virtual {\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin) revert EthDepositRejected();\\n    }\\n}\\n\",\"keccak256\":\"0x02ff3d1cf523bd8c8dc3caf93844ec09223ff9609f5896ef46fa41d5b00c2e03\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/mixins/OnlyWethReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EthReceiver.sol\\\";\\n\\n/**\\n * @title OnlyWethReceiver\\n * @dev Abstract contract extending EthReceiver to accept only ETH deposits from a specified WETH contract.\\n * This contract ensures that only wrapped ETH (WETH) can be deposited, rejecting all other direct ETH transfers.\\n */\\nabstract contract OnlyWethReceiver is EthReceiver {\\n    /// @notice Address of the WETH contract allowed to deposit ETH.\\n    address private immutable _WETH; // solhint-disable-line var-name-mixedcase\\n\\n    /**\\n     * @dev Sets the WETH contract address during construction.\\n     * @param weth Address of the WETH contract.\\n     */\\n    constructor(address weth) {\\n        _WETH = address(weth);\\n    }\\n\\n    /**\\n     * @dev Overrides _receive to restrict ETH transfers solely to the WETH contract.\\n     * Reverts with EthDepositRejected if ETH is sent from any other address.\\n     */\\n    function _receive() internal virtual override {\\n        if (msg.sender != _WETH) revert EthDepositRejected();\\n    }\\n}\\n\",\"keccak256\":\"0x15aecbd7d3ff25452851d8c21ef7a9c6559b1f787701faf642513af84a35fdaa\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/mixins/PermitAndCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"../libraries/SafeERC20.sol\\\";\\n\\n/**\\n * @title PermitAndCall\\n * @dev Abstract contract to support permit and action execution in a single transaction.\\n * Allows tokens that implement EIP-2612 permits, DAI-like permits, USDC-like permits and Permit2 to be approved and spent in a single transaction.\\n */\\nabstract contract PermitAndCall {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Executes a permit for an ERC20 token and then a specified action in a single transaction.\\n     * @param permit ERC20 token address (20 bytes) concatenated with the permit data, allowing this contract to spend the token.\\n     * Format: [token address (20 bytes)][permit data]\\n     * @param action The data representing the action to be executed after the permit.\\n     */\\n    function permitAndCall(bytes calldata permit, bytes calldata action) external payable {\\n        IERC20(address(bytes20(permit))).tryPermit(permit[20:]);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, action.offset, action.length)\\n            let success := delegatecall(gas(), address(), ptr, action.length, 0, 0)\\n            returndatacopy(ptr, 0, returndatasize())\\n            switch success\\n            case 0 {\\n                revert(ptr, returndatasize())\\n            }\\n            default {\\n                return(ptr, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc6bf8748886ecd65a058583ea9fbdd807ab3f12dc4b3a4d6b463f6f92c4cc23c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/LimitOrderProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport { EIP712 } from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./OrderMixin.sol\\\";\\n\\n/**\\n * @title ##1inch Limit Order Protocol v4\\n * @notice Limit order protocol provides two different order types\\n * - Regular Limit Order\\n * - RFQ Order\\n *\\n * Both types provide similar order-fulfilling functionality. The difference is that regular order offers more customization options and features, while RFQ order is extremely gas efficient but without ability to customize.\\n *\\n * Regular limit order additionally supports\\n * - Execution predicates. Conditions for order execution are set with predicates. For example, expiration timestamp or block number, price for stop loss or take profit strategies.\\n * - Callbacks to notify maker on order execution\\n *\\n * See [OrderMixin](OrderMixin.md) for more details.\\n *\\n * RFQ orders supports\\n * - Expiration time\\n * - Cancelation by order id\\n * - Partial Fill (only once)\\n *\\n * See [OrderMixin](OrderMixin.md) for more details.\\n */\\ncontract LimitOrderProtocol is\\n    EIP712(\\\"1inch Limit Order Protocol\\\", \\\"4\\\"),\\n    Ownable,\\n    Pausable,\\n    OrderMixin\\n{\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(IWETH _weth) OrderMixin(_weth) Ownable(msg.sender) {}\\n\\n    /// @dev Returns the domain separator for the current chain (EIP-712)\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns(bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @notice Pauses all the trading functionality in the contract.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses all the trading functionality in the contract.\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x4909da5cf0867a3bb09c6ec9ed2f405c3dbe4e3d99e78dac2e32fe81c6952355\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/OrderLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@1inch/solidity-utils/contracts/libraries/ECDSA.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/libraries/AddressLib.sol\\\";\\n\\nimport \\\"./interfaces/IOrderMixin.sol\\\";\\nimport \\\"./libraries/MakerTraitsLib.sol\\\";\\nimport \\\"./libraries/ExtensionLib.sol\\\";\\nimport \\\"./libraries/AmountCalculatorLib.sol\\\";\\nimport \\\"./interfaces/IAmountGetter.sol\\\";\\n\\n/**\\n * @title OrderLib\\n * @dev The library provides common functionality for processing and manipulating limit orders.\\n * It provides functionality to calculate and verify order hashes, calculate trade amounts, and validate\\n * extension data associated with orders. The library also contains helper methods to get the receiver of\\n * an order and call getter functions.\\n */\\n library OrderLib {\\n    using AddressLib for Address;\\n    using MakerTraitsLib for MakerTraits;\\n    using ExtensionLib for bytes;\\n\\n    /// @dev Error to be thrown when the extension data of an order is missing.\\n    error MissingOrderExtension();\\n    /// @dev Error to be thrown when the order has an unexpected extension.\\n    error UnexpectedOrderExtension();\\n    /// @dev Error to be thrown when the order extension hash is invalid.\\n    error InvalidExtensionHash();\\n\\n    /// @dev The typehash of the order struct.\\n    bytes32 constant internal _LIMIT_ORDER_TYPEHASH = keccak256(\\n        \\\"Order(\\\"\\n            \\\"uint256 salt,\\\"\\n            \\\"address maker,\\\"\\n            \\\"address receiver,\\\"\\n            \\\"address makerAsset,\\\"\\n            \\\"address takerAsset,\\\"\\n            \\\"uint256 makingAmount,\\\"\\n            \\\"uint256 takingAmount,\\\"\\n            \\\"uint256 makerTraits\\\"\\n        \\\")\\\"\\n    );\\n    uint256 constant internal _ORDER_STRUCT_SIZE = 0x100;\\n    uint256 constant internal _DATA_HASH_SIZE = 0x120;\\n\\n    /**\\n      * @notice Calculates the hash of an order.\\n      * @param order The order to be hashed.\\n      * @param domainSeparator The domain separator to be used for the EIP-712 hashing.\\n      * @return result The keccak256 hash of the order data.\\n      */\\n    function hash(IOrderMixin.Order calldata order, bytes32 domainSeparator) internal pure returns(bytes32 result) {\\n        bytes32 typehash = _LIMIT_ORDER_TYPEHASH;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            // keccak256(abi.encode(_LIMIT_ORDER_TYPEHASH, order));\\n            mstore(ptr, typehash)\\n            calldatacopy(add(ptr, 0x20), order, _ORDER_STRUCT_SIZE)\\n            result := keccak256(ptr, _DATA_HASH_SIZE)\\n        }\\n        result = ECDSA.toTypedDataHash(domainSeparator, result);\\n    }\\n\\n    /**\\n      * @notice Returns the receiver address for an order.\\n      * @param order The order.\\n      * @return receiver The address of the receiver, either explicitly defined in the order or the maker's address if not specified.\\n      */\\n    function getReceiver(IOrderMixin.Order calldata order) internal pure returns(address /*receiver*/) {\\n        address receiver = order.receiver.get();\\n        return receiver != address(0) ? receiver : order.maker.get();\\n    }\\n\\n    /**\\n      * @notice Calculates the making amount based on the requested taking amount.\\n      * @dev If getter is specified in the extension data, the getter is called to calculate the making amount,\\n      * otherwise the making amount is calculated linearly.\\n      * @param order The order.\\n      * @param extension The extension data associated with the order.\\n      * @param requestedTakingAmount The amount the taker wants to take.\\n      * @param remainingMakingAmount The remaining amount of the asset left to fill.\\n      * @param orderHash The hash of the order.\\n      * @return makingAmount The amount of the asset the maker receives.\\n      */\\n    function calculateMakingAmount(\\n        IOrderMixin.Order calldata order,\\n        bytes calldata extension,\\n        uint256 requestedTakingAmount,\\n        uint256 remainingMakingAmount,\\n        bytes32 orderHash\\n    ) internal view returns(uint256) {\\n        bytes calldata data = extension.makingAmountData();\\n        if (data.length == 0) {\\n            // Linear proportion\\n            return AmountCalculatorLib.getMakingAmount(order.makingAmount, order.takingAmount, requestedTakingAmount);\\n        }\\n        return IAmountGetter(address(bytes20(data))).getMakingAmount(\\n            order,\\n            extension,\\n            orderHash,\\n            msg.sender,\\n            requestedTakingAmount,\\n            remainingMakingAmount,\\n            data[20:]\\n        );\\n    }\\n\\n    /**\\n      * @notice Calculates the taking amount based on the requested making amount.\\n      * @dev If getter is specified in the extension data, the getter is called to calculate the taking amount,\\n      * otherwise the taking amount is calculated linearly.\\n      * @param order The order.\\n      * @param extension The extension data associated with the order.\\n      * @param requestedMakingAmount The amount the maker wants to receive.\\n      * @param remainingMakingAmount The remaining amount of the asset left to be filled.\\n      * @param orderHash The hash of the order.\\n      * @return takingAmount The amount of the asset the taker takes.\\n      */\\n    function calculateTakingAmount(\\n        IOrderMixin.Order calldata order,\\n        bytes calldata extension,\\n        uint256 requestedMakingAmount,\\n        uint256 remainingMakingAmount,\\n        bytes32 orderHash\\n    ) internal view returns(uint256) {\\n        bytes calldata data = extension.takingAmountData();\\n        if (data.length == 0) {\\n            // Linear proportion\\n            return AmountCalculatorLib.getTakingAmount(order.makingAmount, order.takingAmount, requestedMakingAmount);\\n        }\\n        return IAmountGetter(address(bytes20(data))).getTakingAmount(\\n            order,\\n            extension,\\n            orderHash,\\n            msg.sender,\\n            requestedMakingAmount,\\n            remainingMakingAmount,\\n            data[20:]\\n        );\\n    }\\n\\n    /**\\n      * @dev Validates the extension associated with an order.\\n      * @param order The order to validate against.\\n      * @param extension The extension associated with the order.\\n      * @return valid True if the extension is valid, false otherwise.\\n      * @return errorSelector The error selector if the extension is invalid, 0x00000000 otherwise.\\n      */\\n    function isValidExtension(IOrderMixin.Order calldata order, bytes calldata extension) internal pure returns(bool, bytes4) {\\n        if (order.makerTraits.hasExtension()) {\\n            if (extension.length == 0) return (false, MissingOrderExtension.selector);\\n            // Lowest 160 bits of the order salt must be equal to the lowest 160 bits of the extension hash\\n            if (uint256(keccak256(extension)) & type(uint160).max != order.salt & type(uint160).max) return (false, InvalidExtensionHash.selector);\\n        } else {\\n            if (extension.length > 0) return (false, UnexpectedOrderExtension.selector);\\n        }\\n        return (true, 0x00000000);\\n    }\\n}\\n\",\"keccak256\":\"0x4155c848c0259f7641e413f82b2d2a56731949012a02964a52b24aa78fd4dde9\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/OrderMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { EIP712 } from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\nimport \\\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/mixins/OnlyWethReceiver.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/mixins/PermitAndCall.sol\\\";\\n\\nimport \\\"./helpers/PredicateHelper.sol\\\";\\nimport \\\"./helpers/SeriesEpochManager.sol\\\";\\nimport \\\"./interfaces/ITakerInteraction.sol\\\";\\nimport \\\"./interfaces/IPreInteraction.sol\\\";\\nimport \\\"./interfaces/IPostInteraction.sol\\\";\\nimport \\\"./interfaces/IOrderMixin.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./libraries/TakerTraitsLib.sol\\\";\\nimport \\\"./libraries/BitInvalidatorLib.sol\\\";\\nimport \\\"./libraries/RemainingInvalidatorLib.sol\\\";\\nimport \\\"./OrderLib.sol\\\";\\n\\n/// @title Limit Order mixin\\nabstract contract OrderMixin is IOrderMixin, EIP712, PredicateHelper, SeriesEpochManager, Pausable, OnlyWethReceiver, PermitAndCall {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IWETH;\\n    using OrderLib for IOrderMixin.Order;\\n    using ExtensionLib for bytes;\\n    using AddressLib for Address;\\n    using MakerTraitsLib for MakerTraits;\\n    using TakerTraitsLib for TakerTraits;\\n    using BitInvalidatorLib for BitInvalidatorLib.Data;\\n    using RemainingInvalidatorLib for RemainingInvalidator;\\n\\n    IWETH private immutable _WETH;\\n    mapping(address maker => BitInvalidatorLib.Data data) private _bitInvalidator;\\n    mapping(address maker => mapping(bytes32 orderHash => RemainingInvalidator remaining)) private _remainingInvalidator;\\n\\n    constructor(IWETH weth) OnlyWethReceiver(address(weth)) {\\n        _WETH = weth;\\n    }\\n\\n    /**\\n     * @notice See {IOrderMixin-bitInvalidatorForOrder}.\\n     */\\n    function bitInvalidatorForOrder(address maker, uint256 slot) external view returns(uint256 /* result */) {\\n        return _bitInvalidator[maker].checkSlot(slot);\\n    }\\n\\n    /**\\n     * @notice See {IOrderMixin-remainingInvalidatorForOrder}.\\n     */\\n    function remainingInvalidatorForOrder(address maker, bytes32 orderHash) external view returns(uint256 /* remaining */) {\\n        return _remainingInvalidator[maker][orderHash].remaining();\\n    }\\n\\n    /**\\n     * @notice See {IOrderMixin-rawRemainingInvalidatorForOrder}.\\n     */\\n    function rawRemainingInvalidatorForOrder(address maker, bytes32 orderHash) external view returns(uint256 /* remainingRaw */) {\\n        return RemainingInvalidator.unwrap(_remainingInvalidator[maker][orderHash]);\\n    }\\n\\n    /**\\n     * @notice See {IOrderMixin-simulate}.\\n     */\\n    function simulate(address target, bytes calldata data) external {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory result) = target.delegatecall(data);\\n        revert SimulationResults(success, result);\\n    }\\n\\n    /**\\n     * @notice See {IOrderMixin-cancelOrder}.\\n     */\\n    function cancelOrder(MakerTraits makerTraits, bytes32 orderHash) public {\\n        if (makerTraits.useBitInvalidator()) {\\n            uint256 invalidator = _bitInvalidator[msg.sender].massInvalidate(makerTraits.nonceOrEpoch(), 0);\\n            emit BitInvalidatorUpdated(msg.sender, makerTraits.nonceOrEpoch() >> 8, invalidator);\\n        } else {\\n            _remainingInvalidator[msg.sender][orderHash] = RemainingInvalidatorLib.fullyFilled();\\n            emit OrderCancelled(orderHash);\\n        }\\n    }\\n\\n    /**\\n     * @notice See {IOrderMixin-cancelOrders}.\\n     */\\n    function cancelOrders(MakerTraits[] calldata makerTraits, bytes32[] calldata orderHashes) external {\\n        if (makerTraits.length != orderHashes.length) revert MismatchArraysLengths();\\n        unchecked {\\n            for (uint256 i = 0; i < makerTraits.length; i++) {\\n                cancelOrder(makerTraits[i], orderHashes[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice See {IOrderMixin-bitsInvalidateForOrder}.\\n     */\\n    function bitsInvalidateForOrder(MakerTraits makerTraits, uint256 additionalMask) external {\\n        if (!makerTraits.useBitInvalidator()) revert OrderIsNotSuitableForMassInvalidation();\\n        uint256 invalidator = _bitInvalidator[msg.sender].massInvalidate(makerTraits.nonceOrEpoch(), additionalMask);\\n        emit BitInvalidatorUpdated(msg.sender, makerTraits.nonceOrEpoch() >> 8, invalidator);\\n    }\\n\\n     /**\\n     * @notice See {IOrderMixin-hashOrder}.\\n     */\\n    function hashOrder(IOrderMixin.Order calldata order) external view returns(bytes32) {\\n        return order.hash(_domainSeparatorV4());\\n    }\\n\\n    /**\\n     * @notice See {IOrderMixin-checkPredicate}.\\n     */\\n    function checkPredicate(bytes calldata predicate) public view returns(bool) {\\n        (bool success, uint256 res) = _staticcallForUint(address(this), predicate);\\n        return success && res == 1;\\n    }\\n\\n    /**\\n     * @notice See {IOrderMixin-fillOrder}.\\n     */\\n    function fillOrder(\\n        IOrderMixin.Order calldata order,\\n        bytes32 r,\\n        bytes32 vs,\\n        uint256 amount,\\n        TakerTraits takerTraits\\n    ) external payable returns(uint256 /* makingAmount */, uint256 /* takingAmount */, bytes32 /* orderHash */) {\\n        return _fillOrder(order, r, vs, amount, takerTraits, msg.sender, msg.data[:0], msg.data[:0]);\\n    }\\n\\n    /**\\n     * @notice See {IOrderMixin-fillOrderArgs}.\\n     */\\n    function fillOrderArgs(\\n        IOrderMixin.Order calldata order,\\n        bytes32 r,\\n        bytes32 vs,\\n        uint256 amount,\\n        TakerTraits takerTraits,\\n        bytes calldata args\\n    ) external payable returns(uint256 /* makingAmount */, uint256 /* takingAmount */, bytes32 /* orderHash */) {\\n        (\\n            address target,\\n            bytes calldata extension,\\n            bytes calldata interaction\\n        ) = _parseArgs(takerTraits, args);\\n\\n        return _fillOrder(order, r, vs, amount, takerTraits, target, extension, interaction);\\n    }\\n\\n    function _fillOrder(\\n        IOrderMixin.Order calldata order,\\n        bytes32 r,\\n        bytes32 vs,\\n        uint256 amount,\\n        TakerTraits takerTraits,\\n        address target,\\n        bytes calldata extension,\\n        bytes calldata interaction\\n    ) private returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash) {\\n        // Check signature and apply order/maker permit only on the first fill\\n        orderHash = order.hash(_domainSeparatorV4());\\n        uint256 remainingMakingAmount = _checkRemainingMakingAmount(order, orderHash);\\n        if (remainingMakingAmount == order.makingAmount) {\\n            address maker = order.maker.get();\\n            if (maker == address(0) || maker != ECDSA.recover(orderHash, r, vs)) revert BadSignature();\\n            if (!takerTraits.skipMakerPermit()) {\\n                bytes calldata makerPermit = extension.makerPermit();\\n                if (makerPermit.length >= 20) {\\n                    // proceed only if taker is willing to execute permit and its length is enough to store address\\n                    IERC20(address(bytes20(makerPermit))).tryPermit(maker, address(this), makerPermit[20:]);\\n                    if (!order.makerTraits.useBitInvalidator()) {\\n                        // Bit orders are not subjects for reentrancy, but we still need to check remaining-based orders for reentrancy\\n                        if (!_remainingInvalidator[order.maker.get()][orderHash].isNewOrder()) revert ReentrancyDetected();\\n                    }\\n                }\\n            }\\n        }\\n\\n        (makingAmount, takingAmount) = _fill(order, orderHash, remainingMakingAmount, amount, takerTraits, target, extension, interaction);\\n    }\\n\\n    /**\\n     * @notice See {IOrderMixin-fillContractOrder}.\\n     */\\n    function fillContractOrder(\\n        IOrderMixin.Order calldata order,\\n        bytes calldata signature,\\n        uint256 amount,\\n        TakerTraits takerTraits\\n    ) external returns(uint256 /* makingAmount */, uint256 /* takingAmount */, bytes32 /* orderHash */) {\\n        return _fillContractOrder(order, signature, amount, takerTraits, msg.sender, msg.data[:0], msg.data[:0]);\\n    }\\n\\n    /**\\n     * @notice See {IOrderMixin-fillContractOrderArgs}.\\n     */\\n    function fillContractOrderArgs(\\n        IOrderMixin.Order calldata order,\\n        bytes calldata signature,\\n        uint256 amount,\\n        TakerTraits takerTraits,\\n        bytes calldata args\\n    ) external returns(uint256 /* makingAmount */, uint256 /* takingAmount */, bytes32 /* orderHash */) {\\n        (\\n            address target,\\n            bytes calldata extension,\\n            bytes calldata interaction\\n        ) = _parseArgs(takerTraits, args);\\n\\n        return _fillContractOrder(order, signature, amount, takerTraits, target, extension, interaction);\\n    }\\n\\n    function _fillContractOrder(\\n        IOrderMixin.Order calldata order,\\n        bytes calldata signature,\\n        uint256 amount,\\n        TakerTraits takerTraits,\\n        address target,\\n        bytes calldata extension,\\n        bytes calldata interaction\\n    ) private returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash) {\\n        // Check signature only on the first fill\\n        orderHash = order.hash(_domainSeparatorV4());\\n        uint256 remainingMakingAmount = _checkRemainingMakingAmount(order, orderHash);\\n        if (remainingMakingAmount == order.makingAmount) {\\n            if (!ECDSA.isValidSignature(order.maker.get(), orderHash, signature)) revert BadSignature();\\n        }\\n\\n        (makingAmount, takingAmount) = _fill(order, orderHash, remainingMakingAmount, amount, takerTraits, target, extension, interaction);\\n    }\\n\\n    /**\\n      * @notice Fills an order and transfers making amount to a specified target.\\n      * @dev If the target is zero assigns it the caller's address.\\n      * The function flow is as follows:\\n      * 1. Validate order\\n      * 2. Call maker pre-interaction\\n      * 3. Transfer maker asset to taker\\n      * 4. Call taker interaction\\n      * 5. Transfer taker asset to maker\\n      * 5. Call maker post-interaction\\n      * 6. Emit OrderFilled event\\n      * @param order The order details.\\n      * @param orderHash The hash of the order.\\n      * @param extension The extension calldata of the order.\\n      * @param remainingMakingAmount The remaining amount to be filled.\\n      * @param amount The order amount.\\n      * @param takerTraits The taker preferences for the order.\\n      * @param target The address to which the order is filled.\\n      * @param interaction The interaction calldata.\\n      * @return makingAmount The computed amount that the maker will send.\\n      * @return takingAmount The computed amount that the taker will send.\\n      */\\n    function _fill(\\n        IOrderMixin.Order calldata order,\\n        bytes32 orderHash,\\n        uint256 remainingMakingAmount,\\n        uint256 amount,\\n        TakerTraits takerTraits,\\n        address target,\\n        bytes calldata extension,\\n        bytes calldata interaction\\n    ) private whenNotPaused() returns(uint256 makingAmount, uint256 takingAmount) {\\n        // Validate order\\n        {\\n            (bool valid, bytes4 validationResult) = order.isValidExtension(extension);\\n            if (!valid) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore(0, validationResult)\\n                    revert(0, 4)\\n                }\\n            }\\n        }\\n        if (!order.makerTraits.isAllowedSender(msg.sender)) revert PrivateOrder();\\n        if (order.makerTraits.isExpired()) revert OrderExpired();\\n        if (order.makerTraits.needCheckEpochManager()) {\\n            if (order.makerTraits.useBitInvalidator()) revert EpochManagerAndBitInvalidatorsAreIncompatible();\\n            if (!epochEquals(order.maker.get(), order.makerTraits.series(), order.makerTraits.nonceOrEpoch())) revert WrongSeriesNonce();\\n        }\\n\\n        // Check if orders predicate allows filling\\n        if (extension.length > 0) {\\n            bytes calldata predicate = extension.predicate();\\n            if (predicate.length > 0) {\\n                if (!checkPredicate(predicate)) revert PredicateIsNotTrue();\\n            }\\n        }\\n\\n        // Compute maker and taker assets amount\\n        if (takerTraits.isMakingAmount()) {\\n            makingAmount = Math.min(amount, remainingMakingAmount);\\n            takingAmount = order.calculateTakingAmount(extension, makingAmount, remainingMakingAmount, orderHash);\\n\\n            uint256 threshold = takerTraits.threshold();\\n            if (threshold > 0) {\\n                // Check rate: takingAmount / makingAmount <= threshold / amount\\n                if (amount == makingAmount) {  // Gas optimization, no SafeMath.mul()\\n                    if (takingAmount > threshold) revert TakingAmountTooHigh();\\n                } else {\\n                    if (takingAmount * amount > threshold * makingAmount) revert TakingAmountTooHigh();\\n                }\\n            }\\n        }\\n        else {\\n            takingAmount = amount;\\n            makingAmount = order.calculateMakingAmount(extension, takingAmount, remainingMakingAmount, orderHash);\\n            if (makingAmount > remainingMakingAmount) {\\n                // Try to decrease taking amount because computed making amount exceeds remaining amount\\n                makingAmount = remainingMakingAmount;\\n                takingAmount = order.calculateTakingAmount(extension, makingAmount, remainingMakingAmount, orderHash);\\n                if (takingAmount > amount) revert TakingAmountExceeded();\\n            }\\n\\n            uint256 threshold = takerTraits.threshold();\\n            if (threshold > 0) {\\n                // Check rate: makingAmount / takingAmount >= threshold / amount\\n                if (amount == takingAmount) { // Gas optimization, no SafeMath.mul()\\n                    if (makingAmount < threshold) revert MakingAmountTooLow();\\n                } else {\\n                    if (makingAmount * amount < threshold * takingAmount) revert MakingAmountTooLow();\\n                }\\n            }\\n        }\\n        if (!order.makerTraits.allowPartialFills() && makingAmount != order.makingAmount) revert PartialFillNotAllowed();\\n        unchecked { if (makingAmount * takingAmount == 0) revert SwapWithZeroAmount(); }\\n\\n        // Invalidate order depending on makerTraits\\n        if (order.makerTraits.useBitInvalidator()) {\\n            _bitInvalidator[order.maker.get()].checkAndInvalidate(order.makerTraits.nonceOrEpoch());\\n        } else {\\n            _remainingInvalidator[order.maker.get()][orderHash] = RemainingInvalidatorLib.remains(remainingMakingAmount, makingAmount);\\n        }\\n\\n        // Pre interaction, where maker can prepare funds interactively\\n        if (order.makerTraits.needPreInteractionCall()) {\\n            bytes calldata data = extension.preInteractionTargetAndData();\\n            address listener = order.maker.get();\\n            if (data.length > 19) {\\n                listener = address(bytes20(data));\\n                data = data[20:];\\n            }\\n            IPreInteraction(listener).preInteraction(\\n                order, extension, orderHash, msg.sender, makingAmount, takingAmount, remainingMakingAmount, data\\n            );\\n        }\\n\\n        // Maker => Taker\\n        {\\n            bool needUnwrap = order.makerAsset.get() == address(_WETH) && takerTraits.unwrapWeth();\\n            address receiver = needUnwrap ? address(this) : target;\\n            if (order.makerTraits.usePermit2()) {\\n                if (extension.makerAssetSuffix().length > 0) revert InvalidPermit2Transfer();\\n                IERC20(order.makerAsset.get()).safeTransferFromPermit2(order.maker.get(), receiver, makingAmount);\\n            } else {\\n                if (!_callTransferFromWithSuffix(\\n                    order.makerAsset.get(),\\n                    order.maker.get(),\\n                    receiver,\\n                    makingAmount,\\n                    extension.makerAssetSuffix()\\n                )) revert TransferFromMakerToTakerFailed();\\n            }\\n            if (needUnwrap) {\\n                _WETH.safeWithdrawTo(makingAmount, target);\\n            }\\n        }\\n\\n        if (interaction.length > 19) {\\n            // proceed only if interaction length is enough to store address\\n            ITakerInteraction(address(bytes20(interaction))).takerInteraction(\\n                order, extension, orderHash, msg.sender, makingAmount, takingAmount, remainingMakingAmount, interaction[20:]\\n            );\\n        }\\n\\n        // Taker => Maker\\n        if (order.takerAsset.get() == address(_WETH) && msg.value > 0) {\\n            if (msg.value < takingAmount) revert Errors.InvalidMsgValue();\\n            if (msg.value > takingAmount) {\\n                unchecked {\\n                    // solhint-disable-next-line avoid-low-level-calls\\n                    (bool success, ) = msg.sender.call{value: msg.value - takingAmount}(\\\"\\\");\\n                    if (!success) revert Errors.ETHTransferFailed();\\n                }\\n            }\\n\\n            if (order.makerTraits.unwrapWeth()) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (bool success, ) = order.getReceiver().call{value: takingAmount}(\\\"\\\");\\n                if (!success) revert Errors.ETHTransferFailed();\\n            } else {\\n                _WETH.safeDeposit(takingAmount);\\n                _WETH.safeTransfer(order.getReceiver(), takingAmount);\\n            }\\n        } else {\\n            if (msg.value != 0) revert Errors.InvalidMsgValue();\\n\\n            bool needUnwrap = order.takerAsset.get() == address(_WETH) && order.makerTraits.unwrapWeth();\\n            address receiver = needUnwrap ? address(this) : order.getReceiver();\\n            if (takerTraits.usePermit2()) {\\n                if (extension.takerAssetSuffix().length > 0) revert InvalidPermit2Transfer();\\n                IERC20(order.takerAsset.get()).safeTransferFromPermit2(msg.sender, receiver, takingAmount);\\n            } else {\\n                if (!_callTransferFromWithSuffix(\\n                    order.takerAsset.get(),\\n                    msg.sender,\\n                    receiver,\\n                    takingAmount,\\n                    extension.takerAssetSuffix()\\n                )) revert TransferFromTakerToMakerFailed();\\n            }\\n\\n            if (needUnwrap) {\\n                _WETH.safeWithdrawTo(takingAmount, order.getReceiver());\\n            }\\n        }\\n\\n        // Post interaction, where maker can handle funds interactively\\n        if (order.makerTraits.needPostInteractionCall()) {\\n            bytes calldata data = extension.postInteractionTargetAndData();\\n            address listener = order.maker.get();\\n            if (data.length > 19) {\\n                listener = address(bytes20(data));\\n                data = data[20:];\\n            }\\n            IPostInteraction(listener).postInteraction(\\n                order, extension, orderHash, msg.sender, makingAmount, takingAmount, remainingMakingAmount, data\\n            );\\n        }\\n\\n        emit OrderFilled(orderHash, remainingMakingAmount - makingAmount);\\n    }\\n\\n    /**\\n      * @notice Processes the taker interaction arguments.\\n      * @param takerTraits The taker preferences for the order.\\n      * @param args The taker interaction arguments.\\n      * @return target The address to which the order is filled.\\n      * @return extension The extension calldata of the order.\\n      * @return interaction The interaction calldata.\\n      */\\n    function _parseArgs(TakerTraits takerTraits, bytes calldata args)\\n        private\\n        view\\n        returns(\\n            address target,\\n            bytes calldata extension,\\n            bytes calldata interaction\\n        )\\n    {\\n        if (takerTraits.argsHasTarget()) {\\n            target = address(bytes20(args));\\n            args = args[20:];\\n        } else {\\n            target = msg.sender;\\n        }\\n\\n        uint256 extensionLength = takerTraits.argsExtensionLength();\\n        if (extensionLength > 0) {\\n            extension = args[:extensionLength];\\n            args = args[extensionLength:];\\n        } else {\\n            extension = msg.data[:0];\\n        }\\n\\n        uint256 interactionLength = takerTraits.argsInteractionLength();\\n        if (interactionLength > 0) {\\n            interaction = args[:interactionLength];\\n        } else {\\n            interaction = msg.data[:0];\\n        }\\n    }\\n\\n    /**\\n      * @notice Checks the remaining making amount for the order.\\n      * @dev If the order has been invalidated, the function will revert.\\n      * @param order The order to check.\\n      * @param orderHash The hash of the order.\\n      * @return remainingMakingAmount The remaining amount of the order.\\n      */\\n    function _checkRemainingMakingAmount(IOrderMixin.Order calldata order, bytes32 orderHash) private view returns(uint256 remainingMakingAmount) {\\n        if (order.makerTraits.useBitInvalidator()) {\\n            remainingMakingAmount = order.makingAmount;\\n        } else {\\n            remainingMakingAmount = _remainingInvalidator[order.maker.get()][orderHash].remaining(order.makingAmount);\\n        }\\n        if (remainingMakingAmount == 0) revert InvalidatedOrder();\\n    }\\n\\n    /**\\n      * @notice Calls the transferFrom function with an arbitrary suffix.\\n      * @dev The suffix is appended to the end of the standard ERC20 transferFrom function parameters.\\n      * @param asset The token to be transferred.\\n      * @param from The address to transfer the token from.\\n      * @param to The address to transfer the token to.\\n      * @param amount The amount of the token to transfer.\\n      * @param suffix The suffix (additional data) to append to the end of the transferFrom call.\\n      * @return success A boolean indicating whether the transfer was successful.\\n      */\\n    function _callTransferFromWithSuffix(address asset, address from, address to, uint256 amount, bytes calldata suffix) private returns(bool success) {\\n        bytes4 selector = IERC20.transferFrom.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            if suffix.length {\\n                calldatacopy(add(data, 0x64), suffix.offset, suffix.length)\\n            }\\n            let status := call(gas(), asset, 0, data, add(0x64, suffix.length), 0x0, 0x20)\\n            success := and(status, or(iszero(returndatasize()), and(gt(returndatasize(), 31), eq(mload(0), 1))))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x89d478e68a82057e2e7f6e69eabc9a01ce2c4113cbc504efbb1bdf6be21960e2\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/helpers/PredicateHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\n/// @title A helper contract for executing boolean functions on arbitrary target call results\\ncontract PredicateHelper {\\n    error ArbitraryStaticCallFailed();\\n\\n    /// @notice Calls every target with corresponding data\\n    /// @return Result True if call to any target returned True. Otherwise, false\\n    function or(uint256 offsets, bytes calldata data) public view returns(bool) {\\n        uint256 previous;\\n        for (uint256 current; (current = uint32(offsets)) != 0; offsets >>= 32) {\\n            (bool success, uint256 res) = _staticcallForUint(address(this), data[previous:current]);\\n            if (success && res == 1) {\\n                return true;\\n            }\\n            previous = current;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Calls every target with corresponding data\\n    /// @return Result True if calls to all targets returned True. Otherwise, false\\n    function and(uint256 offsets, bytes calldata data) public view returns(bool) {\\n        uint256 previous;\\n        for (uint256 current; (current = uint32(offsets)) != 0; offsets >>= 32) {\\n            (bool success, uint256 res) = _staticcallForUint(address(this), data[previous:current]);\\n            if (!success || res != 1) {\\n                return false;\\n            }\\n            previous = current;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Calls target with specified data and tests if it's equal to 0\\n    /// @return Result True if call to target returns 0. Otherwise, false\\n    function not(bytes calldata data) public view returns(bool) {\\n        (bool success, uint256 res) = _staticcallForUint(address(this), data);\\n        return success && res == 0;\\n    }\\n\\n    /// @notice Calls target with specified data and tests if it's equal to the value\\n    /// @param value Value to test\\n    /// @return Result True if call to target returns the same value as `value`. Otherwise, false\\n    function eq(uint256 value, bytes calldata data) public view returns(bool) {\\n        (bool success, uint256 res) = _staticcallForUint(address(this), data);\\n        return success && res == value;\\n    }\\n\\n    /// @notice Calls target with specified data and tests if it's lower than value\\n    /// @param value Value to test\\n    /// @return Result True if call to target returns value which is lower than `value`. Otherwise, false\\n    function lt(uint256 value, bytes calldata data) public view returns(bool) {\\n        (bool success, uint256 res) = _staticcallForUint(address(this), data);\\n        return success && res < value;\\n    }\\n\\n    /// @notice Calls target with specified data and tests if it's bigger than value\\n    /// @param value Value to test\\n    /// @return Result True if call to target returns value which is bigger than `value`. Otherwise, false\\n    function gt(uint256 value, bytes calldata data) public view returns(bool) {\\n        (bool success, uint256 res) = _staticcallForUint(address(this), data);\\n        return success && res > value;\\n    }\\n\\n    /// @notice Performs an arbitrary call to target with data\\n    /// @return Result Bytes transmuted to uint256\\n    function arbitraryStaticCall(address target, bytes calldata data) public view returns(uint256) {\\n        (bool success, uint256 res) = _staticcallForUint(target, data);\\n        if (!success) revert ArbitraryStaticCallFailed();\\n        return res;\\n    }\\n\\n    function _staticcallForUint(address target, bytes calldata data) internal view returns(bool success, uint256 res) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            calldatacopy(ptr, data.offset, data.length)\\n            success := staticcall(gas(), target, ptr, data.length, 0x0, 0x20)\\n            success := and(success, eq(returndatasize(), 32))\\n            if success {\\n                res := mload(0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe62318715d108d282ae4ff9dc4122fbaf606228269314e762711c4054eea83d8\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/helpers/SeriesEpochManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\n/// @title A helper contract to manage nonce with the series\\ncontract SeriesEpochManager {\\n    error AdvanceEpochFailed();\\n    event EpochIncreased(address indexed maker, uint256 series, uint256 newEpoch);\\n\\n    // {\\n    //    1: {\\n    //        '0x762f73Ad...842Ffa8': 0,\\n    //        '0xd20c41ee...32aaDe2': 1\\n    //    },\\n    //    2: {\\n    //        '0x762f73Ad...842Ffa8': 3,\\n    //        '0xd20c41ee...32aaDe2': 15\\n    //    },\\n    //    ...\\n    // }\\n    mapping(uint256 seriesId => uint256 epoch) private _epochs;\\n\\n    /// @notice Returns nonce for `maker` and `series`\\n    function epoch(address maker, uint96 series) public view returns(uint256) {\\n        return _epochs[uint160(maker) | (uint256(series) << 160)];\\n    }\\n\\n    /// @notice Advances nonce by one\\n    function increaseEpoch(uint96 series) external {\\n        advanceEpoch(series, 1);\\n    }\\n\\n    /// @notice Advances nonce by specified amount\\n    function advanceEpoch(uint96 series, uint256 amount) public {\\n        if (amount == 0 || amount > 255) revert AdvanceEpochFailed();\\n        unchecked {\\n            uint256 key = uint160(msg.sender) | (uint256(series) << 160);\\n            uint256 newEpoch = _epochs[key] + amount;\\n            _epochs[key] = newEpoch;\\n            emit EpochIncreased(msg.sender, series, newEpoch);\\n        }\\n    }\\n\\n    /// @notice Checks if `maker` has specified `makerEpoch` for `series`\\n    /// @return Result True if `maker` has specified epoch. Otherwise, false\\n    function epochEquals(address maker, uint256 series, uint256 makerEpoch) public view returns(bool) {\\n        return _epochs[uint160(maker) | (uint256(series) << 160)] == makerEpoch;\\n    }\\n}\\n\",\"keccak256\":\"0xa0cf9372278023fe93a831a33167dc3b491034c81d6ce05deb63d2f30330f542\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/interfaces/IAmountGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOrderMixin.sol\\\";\\n\\n/**\\n * @title IAmountGetter\\n * @notice Interface for external logic to determine actual making and taking amounts for orders.\\n */\\ninterface IAmountGetter {\\n    /**\\n     * @notice View method that gets called to determine the actual making amount\\n     * @param order Order being processed\\n     * @param extension Order extension data\\n     * @param orderHash Hash of the order being processed\\n     * @param taker Taker address\\n     * @param takingAmount Actual taking amount\\n     * @param remainingMakingAmount Order remaining making amount\\n     * @param extraData Extra data\\n     * @return makingAmount Actual making amount that should be used for the order\\n     */\\n    function getMakingAmount(\\n        IOrderMixin.Order calldata order,\\n        bytes calldata extension,\\n        bytes32 orderHash,\\n        address taker,\\n        uint256 takingAmount,\\n        uint256 remainingMakingAmount,\\n        bytes calldata extraData\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice View method that gets called to determine the actual taking amount\\n     * @param order Order being processed\\n     * @param extension Order extension data\\n     * @param orderHash Hash of the order being processed\\n     * @param taker Taker address\\n     * @param makingAmount Actual taking amount\\n     * @param remainingMakingAmount Order remaining making amount\\n     * @param extraData Extra data\\n     * @return takingAmount Actual taking amount that should be used for the order\\n     */\\n    function getTakingAmount(\\n        IOrderMixin.Order calldata order,\\n        bytes calldata extension,\\n        bytes32 orderHash,\\n        address taker,\\n        uint256 makingAmount,\\n        uint256 remainingMakingAmount,\\n        bytes calldata extraData\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd2f5f477d812411a2eee26d645cd096b256221862fcf4a004128f7bdd43a6e08\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/interfaces/IOrderMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@1inch/solidity-utils/contracts/libraries/AddressLib.sol\\\";\\nimport \\\"../libraries/MakerTraitsLib.sol\\\";\\nimport \\\"../libraries/TakerTraitsLib.sol\\\";\\n\\n/**\\n * @title IOrderMixin\\n * @notice Interface for order processing logic in the 1inch Limit Order Protocol.\\n */\\ninterface IOrderMixin {\\n    struct Order {\\n        uint256 salt;\\n        Address maker;\\n        Address receiver;\\n        Address makerAsset;\\n        Address takerAsset;\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n        MakerTraits makerTraits;\\n    }\\n\\n    error InvalidatedOrder();\\n    error TakingAmountExceeded();\\n    error PrivateOrder();\\n    error BadSignature();\\n    error OrderExpired();\\n    error WrongSeriesNonce();\\n    error SwapWithZeroAmount();\\n    error PartialFillNotAllowed();\\n    error OrderIsNotSuitableForMassInvalidation();\\n    error EpochManagerAndBitInvalidatorsAreIncompatible();\\n    error ReentrancyDetected();\\n    error PredicateIsNotTrue();\\n    error TakingAmountTooHigh();\\n    error MakingAmountTooLow();\\n    error TransferFromMakerToTakerFailed();\\n    error TransferFromTakerToMakerFailed();\\n    error MismatchArraysLengths();\\n    error InvalidPermit2Transfer();\\n    error SimulationResults(bool success, bytes res);\\n\\n    /**\\n     * @notice Emitted when order gets filled\\n     * @param orderHash Hash of the order\\n     * @param remainingAmount Amount of the maker asset that remains to be filled\\n     */\\n    event OrderFilled(\\n        bytes32 orderHash,\\n        uint256 remainingAmount\\n    );\\n\\n    /**\\n     * @notice Emitted when order without `useBitInvalidator` gets cancelled\\n     * @param orderHash Hash of the order\\n     */\\n    event OrderCancelled(\\n        bytes32 orderHash\\n    );\\n\\n    /**\\n     * @notice Emitted when order with `useBitInvalidator` gets cancelled\\n     * @param maker Maker address\\n     * @param slotIndex Slot index that was updated\\n     * @param slotValue New slot value\\n     */\\n    event BitInvalidatorUpdated(\\n        address indexed maker,\\n        uint256 slotIndex,\\n        uint256 slotValue\\n    );\\n\\n    /**\\n     * @notice Delegates execution to custom implementation. Could be used to validate if `transferFrom` works properly\\n     * @dev The function always reverts and returns the simulation results in revert data.\\n     * @param target Addresses that will be delegated\\n     * @param data Data that will be passed to delegatee\\n     */\\n    function simulate(address target, bytes calldata data) external;\\n\\n    /**\\n     * @notice Cancels order's quote\\n     * @param makerTraits Order makerTraits\\n     * @param orderHash Hash of the order to cancel\\n     */\\n    function cancelOrder(MakerTraits makerTraits, bytes32 orderHash) external;\\n\\n    /**\\n     * @notice Cancels orders' quotes\\n     * @param makerTraits Orders makerTraits\\n     * @param orderHashes Hashes of the orders to cancel\\n     */\\n    function cancelOrders(MakerTraits[] calldata makerTraits, bytes32[] calldata orderHashes) external;\\n\\n    /**\\n     * @notice Cancels all quotes of the maker (works for bit-invalidating orders only)\\n     * @param makerTraits Order makerTraits\\n     * @param additionalMask Additional bitmask to invalidate orders\\n     */\\n    function bitsInvalidateForOrder(MakerTraits makerTraits, uint256 additionalMask) external;\\n\\n    /**\\n     * @notice Fills order's quote, fully or partially (whichever is possible).\\n     * @param order Order quote to fill\\n     * @param r R component of signature\\n     * @param vs VS component of signature\\n     * @param amount Taker amount to fill\\n     * @param takerTraits Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies\\n     * minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\\n     * @return makingAmount Actual amount transferred from maker to taker\\n     * @return takingAmount Actual amount transferred from taker to maker\\n     * @return orderHash Hash of the filled order\\n     */\\n    function fillOrder(\\n        Order calldata order,\\n        bytes32 r,\\n        bytes32 vs,\\n        uint256 amount,\\n        TakerTraits takerTraits\\n    ) external payable returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash);\\n\\n    /**\\n     * @notice Same as `fillOrder` but allows to specify arguments that are used by the taker.\\n     * @param order Order quote to fill\\n     * @param r R component of signature\\n     * @param vs VS component of signature\\n     * @param amount Taker amount to fill\\n     * @param takerTraits Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies\\n     * minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\\n     * @param args Arguments that are used by the taker (target, extension, interaction, permit)\\n     * @return makingAmount Actual amount transferred from maker to taker\\n     * @return takingAmount Actual amount transferred from taker to maker\\n     * @return orderHash Hash of the filled order\\n     */\\n    function fillOrderArgs(\\n        IOrderMixin.Order calldata order,\\n        bytes32 r,\\n        bytes32 vs,\\n        uint256 amount,\\n        TakerTraits takerTraits,\\n        bytes calldata args\\n    ) external payable returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash);\\n\\n    /**\\n     * @notice Same as `fillOrder` but uses contract-based signatures.\\n     * @param order Order quote to fill\\n     * @param signature Signature to confirm quote ownership\\n     * @param amount Taker amount to fill\\n     * @param takerTraits Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies\\n     * minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\\n     * @return makingAmount Actual amount transferred from maker to taker\\n     * @return takingAmount Actual amount transferred from taker to maker\\n     * @return orderHash Hash of the filled order\\n     * @dev See tests for examples\\n     */\\n    function fillContractOrder(\\n        Order calldata order,\\n        bytes calldata signature,\\n        uint256 amount,\\n        TakerTraits takerTraits\\n    ) external returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash);\\n\\n    /**\\n     * @notice Same as `fillContractOrder` but allows to specify arguments that are used by the taker.\\n     * @param order Order quote to fill\\n     * @param signature Signature to confirm quote ownership\\n     * @param amount Taker amount to fill\\n     * @param takerTraits Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies\\n     * minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\\n     * @param args Arguments that are used by the taker (target, extension, interaction, permit)\\n     * @return makingAmount Actual amount transferred from maker to taker\\n     * @return takingAmount Actual amount transferred from taker to maker\\n     * @return orderHash Hash of the filled order\\n     * @dev See tests for examples\\n     */\\n    function fillContractOrderArgs(\\n        Order calldata order,\\n        bytes calldata signature,\\n        uint256 amount,\\n        TakerTraits takerTraits,\\n        bytes calldata args\\n    ) external returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash);\\n\\n    /**\\n     * @notice Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\\n     * @param maker Maker address\\n     * @param slot Slot number to return bitmask for\\n     * @return result Each bit represents whether corresponding was already invalidated\\n     */\\n    function bitInvalidatorForOrder(address maker, uint256 slot) external view returns(uint256 result);\\n\\n    /**\\n     * @notice Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\\n     * @param orderHash Hash of the order\\n     * @return remaining Remaining amount of the order\\n     */\\n    function remainingInvalidatorForOrder(address maker, bytes32 orderHash) external view returns(uint256 remaining);\\n\\n    /**\\n     * @notice Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\\n     * @param orderHash Hash of the order\\n     * @return remainingRaw Inverse of the remaining amount of the order if order was filled at least once, otherwise 0\\n     */\\n    function rawRemainingInvalidatorForOrder(address maker, bytes32 orderHash) external view returns(uint256 remainingRaw);\\n\\n    /**\\n     * @notice Returns order hash, hashed with limit order protocol contract EIP712\\n     * @param order Order\\n     * @return orderHash Hash of the order\\n     */\\n    function hashOrder(IOrderMixin.Order calldata order) external view returns(bytes32 orderHash);\\n}\\n\",\"keccak256\":\"0x39cfb84ae74a276eae63d7b3be898104045f98163405190227ddae3e85f6dd11\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/interfaces/IPostInteraction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOrderMixin.sol\\\";\\n\\ninterface IPostInteraction {\\n    /**\\n     * @notice Callback method that gets called after all fund transfers\\n     * @param order Order being processed\\n     * @param extension Order extension data\\n     * @param orderHash Hash of the order being processed\\n     * @param taker Taker address\\n     * @param makingAmount Actual making amount\\n     * @param takingAmount Actual taking amount\\n     * @param remainingMakingAmount Order remaining making amount\\n     * @param extraData Extra data\\n     */\\n    function postInteraction(\\n        IOrderMixin.Order calldata order,\\n        bytes calldata extension,\\n        bytes32 orderHash,\\n        address taker,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 remainingMakingAmount,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x16a7386f4277240ad30942611a576865ce4ef13b38f6cb8d34f1bbb4c1211434\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/interfaces/IPreInteraction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOrderMixin.sol\\\";\\n\\ninterface IPreInteraction {\\n    /**\\n     * @notice Callback method that gets called before any funds transfers\\n     * @param order Order being processed\\n     * @param extension Order extension data\\n     * @param orderHash Hash of the order being processed\\n     * @param taker Taker address\\n     * @param makingAmount Actual making amount\\n     * @param takingAmount Actual taking amount\\n     * @param remainingMakingAmount Order remaining making amount\\n     * @param extraData Extra data\\n     */\\n    function preInteraction(\\n        IOrderMixin.Order calldata order,\\n        bytes calldata extension,\\n        bytes32 orderHash,\\n        address taker,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 remainingMakingAmount,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5d6e5cfb9e02464727cc5268682fb4cdb870c3ef73a775852cc17b42c9932e23\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/interfaces/ITakerInteraction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOrderMixin.sol\\\";\\n\\n/**\\n * @title Interface for interactor which acts after `maker -> taker` transfer but before `taker -> maker` transfer.\\n * @notice The order filling steps are `preInteraction` =>` Transfer \\\"maker -> taker\\\"` => **`Interaction`** => `Transfer \\\"taker -> maker\\\"` => `postInteraction`\\n */\\ninterface ITakerInteraction {\\n    /**\\n     * @dev This callback allows to interactively handle maker aseets to produce takers assets, doesn't supports ETH as taker assets\\n     * @notice Callback method that gets called after maker fund transfer but before taker fund transfer\\n     * @param order Order being processed\\n     * @param extension Order extension data\\n     * @param orderHash Hash of the order being processed\\n     * @param taker Taker address\\n     * @param makingAmount Actual making amount\\n     * @param takingAmount Actual taking amount\\n     * @param remainingMakingAmount Order remaining making amount\\n     * @param extraData Extra data\\n     */\\n    function takerInteraction(\\n        IOrderMixin.Order calldata order,\\n        bytes calldata extension,\\n        bytes32 orderHash,\\n        address taker,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 remainingMakingAmount,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd66e858e74309edb9de7866af1ccd92990b0f7367cf47b4b5acb94e336e57930\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/libraries/AmountCalculatorLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\n/// @title The helper library to calculate linearly taker amount from maker amount and vice versa.\\nlibrary AmountCalculatorLib {\\n    /// @notice Calculates maker amount\\n    /// @return Result Floored maker amount\\n    function getMakingAmount(uint256 orderMakerAmount, uint256 orderTakerAmount, uint256 swapTakerAmount) internal pure returns(uint256) {\\n        if ((swapTakerAmount | orderMakerAmount) >> 128 == 0) {\\n            unchecked {\\n                return (swapTakerAmount * orderMakerAmount) / orderTakerAmount;\\n            }\\n        }\\n        return swapTakerAmount * orderMakerAmount / orderTakerAmount;\\n    }\\n\\n    /// @notice Calculates taker amount\\n    /// @return Result Ceiled taker amount\\n    function getTakingAmount(uint256 orderMakerAmount, uint256 orderTakerAmount, uint256 swapMakerAmount) internal pure returns(uint256) {\\n        if ((swapMakerAmount | orderTakerAmount) >> 128 == 0) {\\n            unchecked {\\n                return (swapMakerAmount * orderTakerAmount + orderMakerAmount - 1) / orderMakerAmount;\\n            }\\n        }\\n        return (swapMakerAmount * orderTakerAmount + orderMakerAmount - 1) / orderMakerAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x1c7cf84e7c9ffb482edb56ab755567d718d29dd5149aaa1469fa290001cb5b24\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/libraries/BitInvalidatorLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title BitInvalidatorLib\\n * @dev The library provides a mechanism to invalidate objects based on a bit invalidator.\\n * The bit invalidator holds a mapping where each key represents a slot number and each value contains an integer.\\n * Each bit of the integer represents whether the object with corresponding index is valid or has been invalidated (0 - valid, 1 - invalidated).\\n * The nonce given to access or invalidate an entity's state follows this structure:\\n * - bits [0..7] represent the object state index in the slot.\\n * - bits [8..255] represent the slot number (mapping key).\\n */\\nlibrary BitInvalidatorLib {\\n    /// @dev The error is thrown when an attempt is made to invalidate an already invalidated entity.\\n    error BitInvalidatedOrder();\\n\\n    struct Data {\\n        mapping(uint256 slotIndex => uint256 slotData) _raw;\\n    }\\n\\n    /**\\n     * @notice Retrieves the validity status of entities in a specific slot.\\n     * @dev Each bit in the returned value corresponds to the validity of an entity. 0 for valid, 1 for invalidated.\\n     * @param self The data structure.\\n     * @param nonce The nonce identifying the slot.\\n     * @return result The validity status of entities in the slot as a uint256.\\n     */\\n    function checkSlot(Data storage self, uint256 nonce) internal view returns(uint256) {\\n        uint256 invalidatorSlot = nonce >> 8;\\n        return self._raw[invalidatorSlot];\\n    }\\n\\n    /**\\n     * @notice Checks the validity of a specific entity and invalidates it if valid.\\n     * @dev Throws an error if the entity has already been invalidated.\\n     * @param self The data structure.\\n     * @param nonce The nonce identifying the slot and the entity.\\n     */\\n    function checkAndInvalidate(Data storage self, uint256 nonce) internal {\\n        uint256 invalidatorSlot = nonce >> 8;\\n        uint256 invalidatorBit = 1 << (nonce & 0xff);\\n        uint256 invalidator = self._raw[invalidatorSlot];\\n        if (invalidator & invalidatorBit == invalidatorBit) revert BitInvalidatedOrder();\\n        self._raw[invalidatorSlot] = invalidator | invalidatorBit;\\n    }\\n\\n    /**\\n     * @notice Invalidates multiple entities in a single slot.\\n     * @dev The entities to be invalidated are identified by setting their corresponding bits to 1 in a mask.\\n     * @param self The data structure.\\n     * @param nonce The nonce identifying the slot.\\n     * @param additionalMask A mask of bits to be invalidated.\\n     * @return result Resulting validity status of entities in the slot as a uint256.\\n     */\\n    function massInvalidate(Data storage self, uint256 nonce, uint256 additionalMask) internal returns(uint256 result) {\\n        uint256 invalidatorSlot = nonce >> 8;\\n        uint256 invalidatorBits = (1 << (nonce & 0xff)) | additionalMask;\\n        result = self._raw[invalidatorSlot] | invalidatorBits;\\n        self._raw[invalidatorSlot] = result;\\n    }\\n}\\n\",\"keccak256\":\"0x833b6b6d2e101777071b6afdea71242d4c1088bfe94232175ccf1ccede91b412\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    error InvalidMsgValue();\\n    error ETHTransferFailed();\\n}\\n\",\"keccak256\":\"0x02ae257290d4b9dc4cea01ecae5039ec53fd31ea3e2469f439167f7dfadd2c46\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/libraries/ExtensionLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOrderMixin.sol\\\";\\nimport \\\"./OffsetsLib.sol\\\";\\n\\n/**\\n * @title ExtensionLib\\n * @notice Library for retrieving extensions information for the IOrderMixin Interface.\\n */\\nlibrary ExtensionLib {\\n    using AddressLib for Address;\\n    using OffsetsLib for Offsets;\\n\\n    enum DynamicField {\\n        MakerAssetSuffix,\\n        TakerAssetSuffix,\\n        MakingAmountData,\\n        TakingAmountData,\\n        Predicate,\\n        MakerPermit,\\n        PreInteractionData,\\n        PostInteractionData,\\n        CustomData\\n    }\\n\\n    /**\\n     * @notice Returns the MakerAssetSuffix from the provided extension calldata.\\n     * @param extension The calldata from which the MakerAssetSuffix is to be retrieved.\\n     * @return calldata Bytes representing the MakerAssetSuffix.\\n     */\\n    function makerAssetSuffix(bytes calldata extension) internal pure returns(bytes calldata) {\\n        return _get(extension, DynamicField.MakerAssetSuffix);\\n    }\\n\\n    /**\\n     * @notice Returns the TakerAssetSuffix from the provided extension calldata.\\n     * @param extension The calldata from which the TakerAssetSuffix is to be retrieved.\\n     * @return calldata Bytes representing the TakerAssetSuffix.\\n     */\\n    function takerAssetSuffix(bytes calldata extension) internal pure returns(bytes calldata) {\\n        return _get(extension, DynamicField.TakerAssetSuffix);\\n    }\\n\\n    /**\\n     * @notice Returns the MakingAmountData from the provided extension calldata.\\n     * @param extension The calldata from which the MakingAmountData is to be retrieved.\\n     * @return calldata Bytes representing the MakingAmountData.\\n     */\\n    function makingAmountData(bytes calldata extension) internal pure returns(bytes calldata) {\\n        return _get(extension, DynamicField.MakingAmountData);\\n    }\\n\\n    /**\\n     * @notice Returns the TakingAmountData from the provided extension calldata.\\n     * @param extension The calldata from which the TakingAmountData is to be retrieved.\\n     * @return calldata Bytes representing the TakingAmountData.\\n     */\\n    function takingAmountData(bytes calldata extension) internal pure returns(bytes calldata) {\\n        return _get(extension, DynamicField.TakingAmountData);\\n    }\\n\\n    /**\\n     * @notice Returns the order's predicate from the provided extension calldata.\\n     * @param extension The calldata from which the predicate is to be retrieved.\\n     * @return calldata Bytes representing the predicate.\\n     */\\n    function predicate(bytes calldata extension) internal pure returns(bytes calldata) {\\n        return _get(extension, DynamicField.Predicate);\\n    }\\n\\n    /**\\n     * @notice Returns the maker's permit from the provided extension calldata.\\n     * @param extension The calldata from which the maker's permit is to be retrieved.\\n     * @return calldata Bytes representing the maker's permit.\\n     */\\n    function makerPermit(bytes calldata extension) internal pure returns(bytes calldata) {\\n        return _get(extension, DynamicField.MakerPermit);\\n    }\\n\\n\\n    /**\\n     * @notice Returns the pre-interaction from the provided extension calldata.\\n     * @param extension The calldata from which the pre-interaction is to be retrieved.\\n     * @return calldata Bytes representing the pre-interaction.\\n     */\\n    function preInteractionTargetAndData(bytes calldata extension) internal pure returns(bytes calldata) {\\n        return _get(extension, DynamicField.PreInteractionData);\\n    }\\n\\n    /**\\n     * @notice Returns the post-interaction from the provided extension calldata.\\n     * @param extension The calldata from which the post-interaction is to be retrieved.\\n     * @return calldata Bytes representing the post-interaction.\\n     */\\n    function postInteractionTargetAndData(bytes calldata extension) internal pure returns(bytes calldata) {\\n        return _get(extension, DynamicField.PostInteractionData);\\n    }\\n\\n    /**\\n     * @notice Returns extra suffix data from the provided extension calldata.\\n     * @param extension The calldata from which the extra suffix data is to be retrieved.\\n     * @return calldata Bytes representing the extra suffix data.\\n     */\\n    function customData(bytes calldata extension) internal pure returns(bytes calldata) {\\n        if (extension.length < 0x20) return msg.data[:0];\\n        uint256 offsets = uint256(bytes32(extension));\\n        unchecked {\\n            return extension[0x20 + (offsets >> 224):];\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves a specific field from the provided extension calldata.\\n     * @dev The first 32 bytes of an extension calldata contain offsets to the end of each field within the calldata.\\n     * @param extension The calldata from which the field is to be retrieved.\\n     * @param field The specific dynamic field to retrieve from the extension.\\n     * @return calldata Bytes representing the requested field.\\n     */\\n    function _get(bytes calldata extension, DynamicField field) private pure returns(bytes calldata) {\\n        if (extension.length < 0x20) return msg.data[:0];\\n\\n        Offsets offsets;\\n        bytes calldata concat;\\n        assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n            offsets := calldataload(extension.offset)\\n            concat.offset := add(extension.offset, 0x20)\\n            concat.length := sub(extension.length, 0x20)\\n        }\\n\\n        return offsets.get(concat, uint256(field));\\n    }\\n}\\n\",\"keccak256\":\"0x0e1ef5b959f77126f61c10e11fcd6043832baf9260cfb2bcf9bff8e446bae65d\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/libraries/MakerTraitsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ntype MakerTraits is uint256;\\n\\n/**\\n * @title MakerTraitsLib\\n * @notice A library to manage and check MakerTraits, which are used to encode the maker's preferences for an order in a single uint256.\\n * @dev\\n * The MakerTraits type is a uint256 and different parts of the number are used to encode different traits.\\n * High bits are used for flags\\n * 255 bit `NO_PARTIAL_FILLS_FLAG`          - if set, the order does not allow partial fills\\n * 254 bit `ALLOW_MULTIPLE_FILLS_FLAG`      - if set, the order permits multiple fills\\n * 253 bit                                  - unused\\n * 252 bit `PRE_INTERACTION_CALL_FLAG`      - if set, the order requires pre-interaction call\\n * 251 bit `POST_INTERACTION_CALL_FLAG`     - if set, the order requires post-interaction call\\n * 250 bit `NEED_CHECK_EPOCH_MANAGER_FLAG`  - if set, the order requires to check the epoch manager\\n * 249 bit `HAS_EXTENSION_FLAG`             - if set, the order has extension(s)\\n * 248 bit `USE_PERMIT2_FLAG`               - if set, the order uses permit2\\n * 247 bit `UNWRAP_WETH_FLAG`               - if set, the order requires to unwrap WETH\\n\\n * Low 200 bits are used for allowed sender, expiration, nonceOrEpoch, and series\\n * uint80 last 10 bytes of allowed sender address (0 if any)\\n * uint40 expiration timestamp (0 if none)\\n * uint40 nonce or epoch\\n * uint40 series\\n */\\nlibrary MakerTraitsLib {\\n    // Low 200 bits are used for allowed sender, expiration, nonceOrEpoch, and series\\n    uint256 private constant _ALLOWED_SENDER_MASK = type(uint80).max;\\n    uint256 private constant _EXPIRATION_OFFSET = 80;\\n    uint256 private constant _EXPIRATION_MASK = type(uint40).max;\\n    uint256 private constant _NONCE_OR_EPOCH_OFFSET = 120;\\n    uint256 private constant _NONCE_OR_EPOCH_MASK = type(uint40).max;\\n    uint256 private constant _SERIES_OFFSET = 160;\\n    uint256 private constant _SERIES_MASK = type(uint40).max;\\n\\n    uint256 private constant _NO_PARTIAL_FILLS_FLAG = 1 << 255;\\n    uint256 private constant _ALLOW_MULTIPLE_FILLS_FLAG = 1 << 254;\\n    uint256 private constant _PRE_INTERACTION_CALL_FLAG = 1 << 252;\\n    uint256 private constant _POST_INTERACTION_CALL_FLAG = 1 << 251;\\n    uint256 private constant _NEED_CHECK_EPOCH_MANAGER_FLAG = 1 << 250;\\n    uint256 private constant _HAS_EXTENSION_FLAG = 1 << 249;\\n    uint256 private constant _USE_PERMIT2_FLAG = 1 << 248;\\n    uint256 private constant _UNWRAP_WETH_FLAG = 1 << 247;\\n\\n    /**\\n     * @notice Checks if the order has the extension flag set.\\n     * @dev If the `HAS_EXTENSION_FLAG` is set in the makerTraits, then the protocol expects that the order has extension(s).\\n     * @param makerTraits The traits of the maker.\\n     * @return result A boolean indicating whether the flag is set.\\n     */\\n    function hasExtension(MakerTraits makerTraits) internal pure returns (bool) {\\n        return (MakerTraits.unwrap(makerTraits) & _HAS_EXTENSION_FLAG) != 0;\\n    }\\n\\n    /**\\n     * @notice Checks if the maker allows a specific taker to fill the order.\\n     * @param makerTraits The traits of the maker.\\n     * @param sender The address of the taker to be checked.\\n     * @return result A boolean indicating whether the taker is allowed.\\n     */\\n    function isAllowedSender(MakerTraits makerTraits, address sender) internal pure returns (bool) {\\n        uint160 allowedSender = uint160(MakerTraits.unwrap(makerTraits) & _ALLOWED_SENDER_MASK);\\n        return allowedSender == 0 || allowedSender == uint160(sender) & _ALLOWED_SENDER_MASK;\\n    }\\n\\n    /**\\n     * @notice Returns the expiration time of the order.\\n     * @param makerTraits The traits of the maker.\\n     * @return result The expiration timestamp of the order.\\n     */\\n    function getExpirationTime(MakerTraits makerTraits) internal pure returns (uint256) {\\n        return (MakerTraits.unwrap(makerTraits) >> _EXPIRATION_OFFSET) & _EXPIRATION_MASK;\\n    }\\n\\n    /**\\n     * @notice Checks if the order has expired.\\n     * @param makerTraits The traits of the maker.\\n     * @return result A boolean indicating whether the order has expired.\\n     */\\n    function isExpired(MakerTraits makerTraits) internal view returns (bool) {\\n        uint256 expiration = getExpirationTime(makerTraits);\\n        return expiration != 0 && expiration < block.timestamp;  // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /**\\n     * @notice Returns the nonce or epoch of the order.\\n     * @param makerTraits The traits of the maker.\\n     * @return result The nonce or epoch of the order.\\n     */\\n    function nonceOrEpoch(MakerTraits makerTraits) internal pure returns (uint256) {\\n        return (MakerTraits.unwrap(makerTraits) >> _NONCE_OR_EPOCH_OFFSET) & _NONCE_OR_EPOCH_MASK;\\n    }\\n\\n    /**\\n     * @notice Returns the series of the order.\\n     * @param makerTraits The traits of the maker.\\n     * @return result The series of the order.\\n     */\\n    function series(MakerTraits makerTraits) internal pure returns (uint256) {\\n        return (MakerTraits.unwrap(makerTraits) >> _SERIES_OFFSET) & _SERIES_MASK;\\n    }\\n\\n    /**\\n      * @notice Determines if the order allows partial fills.\\n      * @dev If the _NO_PARTIAL_FILLS_FLAG is not set in the makerTraits, then the order allows partial fills.\\n      * @param makerTraits The traits of the maker, determining their preferences for the order.\\n      * @return result A boolean indicating whether the maker allows partial fills.\\n      */\\n    function allowPartialFills(MakerTraits makerTraits) internal pure returns (bool) {\\n        return (MakerTraits.unwrap(makerTraits) & _NO_PARTIAL_FILLS_FLAG) == 0;\\n    }\\n\\n    /**\\n     * @notice Checks if the maker needs pre-interaction call.\\n     * @param makerTraits The traits of the maker.\\n     * @return result A boolean indicating whether the maker needs a pre-interaction call.\\n     */\\n    function needPreInteractionCall(MakerTraits makerTraits) internal pure returns (bool) {\\n        return (MakerTraits.unwrap(makerTraits) & _PRE_INTERACTION_CALL_FLAG) != 0;\\n    }\\n\\n    /**\\n     * @notice Checks if the maker needs post-interaction call.\\n     * @param makerTraits The traits of the maker.\\n     * @return result A boolean indicating whether the maker needs a post-interaction call.\\n     */\\n    function needPostInteractionCall(MakerTraits makerTraits) internal pure returns (bool) {\\n        return (MakerTraits.unwrap(makerTraits) & _POST_INTERACTION_CALL_FLAG) != 0;\\n    }\\n\\n    /**\\n      * @notice Determines if the order allows multiple fills.\\n      * @dev If the _ALLOW_MULTIPLE_FILLS_FLAG is set in the makerTraits, then the maker allows multiple fills.\\n      * @param makerTraits The traits of the maker, determining their preferences for the order.\\n      * @return result A boolean indicating whether the maker allows multiple fills.\\n      */\\n    function allowMultipleFills(MakerTraits makerTraits) internal pure returns (bool) {\\n        return (MakerTraits.unwrap(makerTraits) & _ALLOW_MULTIPLE_FILLS_FLAG) != 0;\\n    }\\n\\n    /**\\n      * @notice Determines if an order should use the bit invalidator or remaining amount validator.\\n      * @dev The bit invalidator can be used if the order does not allow partial or multiple fills.\\n      * @param makerTraits The traits of the maker, determining their preferences for the order.\\n      * @return result A boolean indicating whether the bit invalidator should be used.\\n      * True if the order requires the use of the bit invalidator.\\n      */\\n    function useBitInvalidator(MakerTraits makerTraits) internal pure returns (bool) {\\n        return !allowPartialFills(makerTraits) || !allowMultipleFills(makerTraits);\\n    }\\n\\n    /**\\n     * @notice Checks if the maker needs to check the epoch.\\n     * @param makerTraits The traits of the maker.\\n     * @return result A boolean indicating whether the maker needs to check the epoch manager.\\n     */\\n    function needCheckEpochManager(MakerTraits makerTraits) internal pure returns (bool) {\\n        return (MakerTraits.unwrap(makerTraits) & _NEED_CHECK_EPOCH_MANAGER_FLAG) != 0;\\n    }\\n\\n    /**\\n     * @notice Checks if the maker uses permit2.\\n     * @param makerTraits The traits of the maker.\\n     * @return result A boolean indicating whether the maker uses permit2.\\n     */\\n    function usePermit2(MakerTraits makerTraits) internal pure returns (bool) {\\n        return MakerTraits.unwrap(makerTraits) & _USE_PERMIT2_FLAG != 0;\\n    }\\n\\n    /**\\n     * @notice Checks if the maker needs to unwraps WETH.\\n     * @param makerTraits The traits of the maker.\\n     * @return result A boolean indicating whether the maker needs to unwrap WETH.\\n     */\\n    function unwrapWeth(MakerTraits makerTraits) internal pure returns (bool) {\\n        return MakerTraits.unwrap(makerTraits) & _UNWRAP_WETH_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9506febc99293a286356a03cb150ad82ccb88be1b4c908183e1273b41fcb902c\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/libraries/OffsetsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ntype Offsets is uint256;\\n\\n/// @title OffsetsLib\\n/// @dev A library for retrieving values by offsets from a concatenated calldata.\\nlibrary OffsetsLib {\\n\\n    /// @dev Error to be thrown when the offset is out of bounds.\\n    error OffsetOutOfBounds();\\n\\n    /**\\n     * @notice Retrieves the field value calldata corresponding to the provided field index from the concatenated calldata.\\n     * @dev \\n     * The function performs the following steps:\\n     * 1. Retrieve the start and end of the segment corresponding to the provided index from the offsets array.\\n     * 2. Get the value from segment using offset and length calculated based on the start and end of the segment.\\n     * 3. Throw `OffsetOutOfBounds` error if the length of the segment is greater than the length of the concatenated data.\\n     * @param offsets The offsets encoding the start and end of each segment within the concatenated calldata.\\n     * @param concat The concatenated calldata.\\n     * @param index The index of the segment to retrieve. The field index 0 corresponds to the lowest bytes of the offsets array.\\n     * @return result The calldata from a segment of the concatenated calldata corresponding to the provided index.\\n     */\\n    function get(Offsets offsets, bytes calldata concat, uint256 index) internal pure returns(bytes calldata result) {\\n        bytes4 exception = OffsetOutOfBounds.selector;\\n        assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n            let bitShift := shl(5, index)                                   // bitShift = index * 32\\n            let begin := and(0xffffffff, shr(bitShift, shl(32, offsets)))   // begin = offsets[ bitShift : bitShift + 32 ]\\n            let end := and(0xffffffff, shr(bitShift, offsets))              // end   = offsets[ bitShift + 32 : bitShift + 64 ]\\n            result.offset := add(concat.offset, begin)\\n            result.length := sub(end, begin)\\n            if gt(end, concat.length) {\\n                mstore(0, exception)\\n                revert(0, 4)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb28030050b4c7b78e0ab596a98d3f437c1fce386b8de0a56a557209e0754636b\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/libraries/RemainingInvalidatorLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ntype RemainingInvalidator is uint256;\\n\\n/**\\n * @title RemainingInvalidatorLib\\n * @notice The library provides a mechanism to invalidate order based on the remaining amount of the order.\\n * @dev The remaining amount is used as a nonce to invalidate the order.\\n * When order is created, the remaining invalidator is 0.\\n * When order is filled, the remaining invalidator is the inverse of the remaining amount.\\n */\\nlibrary RemainingInvalidatorLib {\\n\\n    /// @dev The error is thrown when an attempt is made to invalidate an already invalidated entity.\\n    error RemainingInvalidatedOrder();\\n\\n    /**\\n     * @notice Checks if an order is new based on the invalidator value.\\n     * @param invalidator The remaining invalidator of the order.\\n     * @return result Whether the order is new or not.\\n     */\\n    function isNewOrder(RemainingInvalidator invalidator) internal pure returns(bool) {\\n        return RemainingInvalidator.unwrap(invalidator) == 0;\\n    }\\n\\n    /**\\n     * @notice Retrieves the remaining amount for an order.\\n     * @dev If the order is unknown, a RemainingInvalidatedOrder error is thrown.\\n     * @param invalidator The remaining invalidator for the order.\\n     * @return result The remaining amount for the order.\\n     */\\n    function remaining(RemainingInvalidator invalidator) internal pure returns(uint256) {\\n        uint256 value = RemainingInvalidator.unwrap(invalidator);\\n        if (value == 0) {\\n            revert RemainingInvalidatedOrder();\\n        }\\n        unchecked {\\n            return ~value;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the remaining amount for an order.\\n     * @dev If the order is unknown, the order maker amount is returned.\\n     * @param invalidator The remaining invalidator for the order.\\n     * @param orderMakerAmount The amount to return if the order is new.\\n     * @return result The remaining amount for the order.\\n     */\\n    function remaining(RemainingInvalidator invalidator, uint256 orderMakerAmount) internal pure returns(uint256) {\\n        uint256 value = RemainingInvalidator.unwrap(invalidator);\\n        if (value == 0) {\\n            return orderMakerAmount;\\n        }\\n        unchecked {\\n            return ~value;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the remaining invalidator of the order.\\n     * @param remainingMakingAmount The remaining making amount of the order.\\n     * @param makingAmount The making amount of the order.\\n     * @return result The remaining invalidator for the order.\\n     */\\n    function remains(uint256 remainingMakingAmount, uint256 makingAmount) internal pure returns(RemainingInvalidator) {\\n        unchecked {\\n            return RemainingInvalidator.wrap(~(remainingMakingAmount - makingAmount));\\n        }\\n    }\\n\\n    /**\\n     * @notice Provides the remaining invalidator for a fully filled order.\\n     * @return result The remaining invalidator for a fully filled order.\\n     */\\n    function fullyFilled() internal pure returns(RemainingInvalidator) {\\n        return RemainingInvalidator.wrap(type(uint256).max);\\n    }\\n}\\n\",\"keccak256\":\"0x5f2b3d07c5cc4b83b088862765c950c10add12dc8b93acb6c1e4670c6f5c23c2\",\"license\":\"MIT\"},\"contracts/1inch/limit-order-protocol/libraries/TakerTraitsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ntype TakerTraits is uint256;\\n\\n/**\\n * @title TakerTraitsLib\\n * @notice This library to manage and check TakerTraits, which are used to encode the taker's preferences for an order in a single uint256.\\n * @dev The TakerTraits are structured as follows:\\n * High bits are used for flags\\n * 255 bit `_MAKER_AMOUNT_FLAG`           - If set, the taking amount is calculated based on making amount, otherwise making amount is calculated based on taking amount.\\n * 254 bit `_UNWRAP_WETH_FLAG`            - If set, the WETH will be unwrapped into ETH before sending to taker.\\n * 253 bit `_SKIP_ORDER_PERMIT_FLAG`      - If set, the order skips maker's permit execution.\\n * 252 bit `_USE_PERMIT2_FLAG`            - If set, the order uses the permit2 function for authorization.\\n * 251 bit `_ARGS_HAS_TARGET`             - If set, then first 20 bytes of args are treated as target address for maker\\u2019s funds transfer.\\n * 224-247 bits `ARGS_EXTENSION_LENGTH`   - The length of the extension calldata in the args.\\n * 200-223 bits `ARGS_INTERACTION_LENGTH` - The length of the interaction calldata in the args.\\n * 0-184 bits                             - The threshold amount (the maximum amount a taker agrees to give in exchange for a making amount).\\n */\\nlibrary TakerTraitsLib {\\n    uint256 private constant _MAKER_AMOUNT_FLAG = 1 << 255;\\n    uint256 private constant _UNWRAP_WETH_FLAG = 1 << 254;\\n    uint256 private constant _SKIP_ORDER_PERMIT_FLAG = 1 << 253;\\n    uint256 private constant _USE_PERMIT2_FLAG = 1 << 252;\\n    uint256 private constant _ARGS_HAS_TARGET = 1 << 251;\\n\\n    uint256 private constant _ARGS_EXTENSION_LENGTH_OFFSET = 224;\\n    uint256 private constant _ARGS_EXTENSION_LENGTH_MASK = 0xffffff;\\n    uint256 private constant _ARGS_INTERACTION_LENGTH_OFFSET = 200;\\n    uint256 private constant _ARGS_INTERACTION_LENGTH_MASK = 0xffffff;\\n\\n    uint256 private constant _AMOUNT_MASK = 0x000000000000000000ffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /**\\n     * @notice Checks if the args should contain target address.\\n     * @param takerTraits The traits of the taker.\\n     * @return result A boolean indicating whether the args should contain target address.\\n     */\\n    function argsHasTarget(TakerTraits takerTraits) internal pure returns (bool) {\\n        return (TakerTraits.unwrap(takerTraits) & _ARGS_HAS_TARGET) != 0;\\n    }\\n\\n    /**\\n     * @notice Retrieves the length of the extension calldata from the takerTraits.\\n     * @param takerTraits The traits of the taker.\\n     * @return result The length of the extension calldata encoded in the takerTraits.\\n     */\\n    function argsExtensionLength(TakerTraits takerTraits) internal pure returns (uint256) {\\n        return (TakerTraits.unwrap(takerTraits) >> _ARGS_EXTENSION_LENGTH_OFFSET) & _ARGS_EXTENSION_LENGTH_MASK;\\n    }\\n\\n    /**\\n     * @notice Retrieves the length of the interaction calldata from the takerTraits.\\n     * @param takerTraits The traits of the taker.\\n     * @return result The length of the interaction calldata encoded in the takerTraits.\\n     */\\n    function argsInteractionLength(TakerTraits takerTraits) internal pure returns (uint256) {\\n        return (TakerTraits.unwrap(takerTraits) >> _ARGS_INTERACTION_LENGTH_OFFSET) & _ARGS_INTERACTION_LENGTH_MASK;\\n    }\\n\\n    /**\\n     * @notice Checks if the taking amount should be calculated based on making amount.\\n     * @param takerTraits The traits of the taker.\\n     * @return result A boolean indicating whether the taking amount should be calculated based on making amount.\\n     */\\n    function isMakingAmount(TakerTraits takerTraits) internal pure returns (bool) {\\n        return (TakerTraits.unwrap(takerTraits) & _MAKER_AMOUNT_FLAG) != 0;\\n    }\\n\\n    /**\\n     * @notice Checks if the order should unwrap WETH and send ETH to taker.\\n     * @param takerTraits The traits of the taker.\\n     * @return result A boolean indicating whether the order should unwrap WETH.\\n     */\\n    function unwrapWeth(TakerTraits takerTraits) internal pure returns (bool) {\\n        return (TakerTraits.unwrap(takerTraits) & _UNWRAP_WETH_FLAG) != 0;\\n    }\\n\\n    /**\\n     * @notice Checks if the order should skip maker's permit execution.\\n     * @param takerTraits The traits of the taker.\\n     * @return result A boolean indicating whether the order don't apply permit.\\n     */\\n    function skipMakerPermit(TakerTraits takerTraits) internal pure returns (bool) {\\n        return (TakerTraits.unwrap(takerTraits) & _SKIP_ORDER_PERMIT_FLAG) != 0;\\n    }\\n\\n    /**\\n     * @notice Checks if the order uses the permit2 instead of permit.\\n     * @param takerTraits The traits of the taker.\\n     * @return result A boolean indicating whether the order uses the permit2.\\n     */\\n    function usePermit2(TakerTraits takerTraits) internal pure returns (bool) {\\n        return (TakerTraits.unwrap(takerTraits) & _USE_PERMIT2_FLAG) != 0;\\n    }\\n\\n    /**\\n     * @notice Retrieves the threshold amount from the takerTraits.\\n     * The maximum amount a taker agrees to give in exchange for a making amount.\\n     * @param takerTraits The traits of the taker.\\n     * @return result The threshold amount encoded in the takerTraits.\\n     */\\n    function threshold(TakerTraits takerTraits) internal pure returns (uint256) {\\n        return TakerTraits.unwrap(takerTraits) & _AMOUNT_MASK;\\n    }\\n}\\n\",\"keccak256\":\"0x144f154a46e8daa0fec5b8215f1d8d3b694cb939236aa7bf89976b27965c2837\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a0346200027a576001600160401b0390601f6200446d38819003918201601f1916830192919084841183851017620002645781602092849260409687528339810103126200027a57516001600160a01b0391828216908183036200027a578051906200006d826200027f565b601a825260208201907f31696e6368204c696d6974204f726465722050726f746f636f6c0000000000008252805196620000a7886200027f565b6001885260208801600d60fa1b8152620000c1856200029b565b93610120948552620000d38a6200046e565b95610140968752519020988960e05251902061010098818a524660a05283519160208301917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f83528584015260608301524660808301523060a083015260a0825260c0820192828410908411176200026457828452815190206080523060c05233156200024d575050600354905195339082167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600160a81b0319163360ff60a01b191617600355610160928352610180938452613e5195866200061c873960805186612f90015260a0518661305b015260c05186612f5a015260e05186612fdf0152518561300501525184611e0c01525183611e3501525182601d01525181818161041b015281816104aa01528181610685015281816106d70152818161073d0152818161080b0152818161093a015281816110c5015281816119760152818161234c015281816123db01526124fd0152f35b631e4fbdf760e01b8252600060c490910152602490fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b604081019081106001600160401b038211176200026457604052565b805160209190828110156200033a575090601f825111620002d95780825192015190808310620002ca57501790565b82600019910360031b1b161790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b82851062000320575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350620002fc565b6001600160401b03811162000264576000928354926001938481811c9116801562000463575b838210146200044f57601f811162000419575b5081601f8411600114620003b257509282939183928694620003a6575b50501b916000199060031b1c191617905560ff90565b01519250388062000390565b919083601f1981168780528488209488905b88838310620003fe5750505010620003e4575b505050811b01905560ff90565b015160001960f88460031b161c19169055388080620003d7565b858701518855909601959485019487935090810190620003c4565b85805284601f848820920160051c820191601f860160051c015b8281106200044357505062000373565b87815501859062000433565b634e487b7160e01b86526022600452602486fd5b90607f169062000360565b805160209081811015620004fc5750601f8251116200049b5780825192015190808310620002ca57501790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b828510620004e2575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350620004be565b9192916001600160401b038111620002645760019182548381811c9116801562000610575b82821014620005fa57601f8111620005c1575b5080601f83116001146200057457508192939460009262000568575b5050600019600383901b1c191690821b17905560ff90565b01519050388062000550565b90601f198316958460005282600020926000905b888210620005a95750508385969710620003e457505050811b01905560ff90565b80878596829496860151815501950193019062000588565b8360005283601f83600020920160051c820191601f850160051c015b828110620005ed57505062000534565b60008155018490620005dd565b634e487b7160e01b600052602260045260246000fd5b90607f16906200052156fe608080604052600436101561005f575b50361561001b57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361004d57005b604051631b10b0f960e01b8152600490fd5b60003560e01c90816305b1ea0314612aae575080630d2c7c1614612a07578063143e86a7146129bc57806315169dec1461296c5780633644e515146129495780633f4ba83a146128d7578063435b9789146128755780634f38e2b81461284457806356a758681461214d5780635816d723146120b65780635c975abb146120905780636fe7b0ba1461205f578063715018a6146120025780637426114514611fe9578063802b2ef114611f785780638456cb5914611f1657806384b0196e14611df657806389e7c65014611d5b5780638da5cb5b14611d325780639fda64bd146117fe578063b68fb020146117dd578063bd61951d14611782578063bf15fcd814611748578063bf797959146116f2578063bfa75143146116d9578063c2a4075314611691578063c3cf804314611615578063ca4ece22146115d9578063cc713a0414610f29578063ce3d710a14610edb578063f2fde38b14610e52578063f497df751461023a5763fcea9e4e146101d7573861000f565b34610235576040366003190112610235576101f0612b65565b6024356001600160601b0381168103610235576001600160601b0360a01b9060a01b169060018060a01b03161760005260026020526020604060002054604051908152f35b600080fd5b36600319016101a0811261023557610100136102355761012435610184356001600160401b03811161023557610277610281913690600401612b7b565b90610164356130ad565b9461029261028d612f57565b613143565b9361029c85613194565b9260009260a4358514610d08575b506102b3613589565b6102bd85836137b9565b9015610cff575069ffffffffffffffffffff8060e435168015918215610cf3575b505015610ce15764ffffffffff8060e43560501c168015159081610cd7575b50610cc55760e435600160fa1b16610c56575b5084610c05575b61016435600160ff1b1615610b4d57836101443510600014610b465761014435975b889761034888878c8a88613991565b99610164356001600160b81b03169081610aec575b50505b60e435600160ff1b16151580610ae0575b610ace5789890215610abc5761038860e435612f11565b15610a8e576024356001600160a01b0316600090815260046020908152604080832060e435608081901c63ffffffff168552928190529220549190600160789190911c60ff161b80831614610a7c5763ffffffff60e43560801c16600052602052600160ff60e43560781c161b176040600020555b60e435600160fc1b166109bb575b6064356001600160a01b039081167f000000000000000000000000000000000000000000000000000000000000000090911614806109a9575b80156109a357305b8a60e435600160f81b161561096457506104668987613c62565b905061083457610489908b906001600160a01b0360243581169060643516613a94565b610933575b50601381116108a5575b50506001600160a01b036084358116907f0000000000000000000000000000000000000000000000000000000000000000168114808061089c575b156107b55750508634106107a35786341161077a575b60e435600160f71b161561067357818080808a610504613b6c565b5af161050e612e80565b50156106615785935b60e435600160fb1b16610586575b505050604061055961058294937ffec331350fce78ba658e082a71da20ac9f8d798a99b3c79681c8440cbfe77e0793613349565b8151908482526020820152a1604051938493846040919493926060820195825260208201520152565b0390f35b90919293506105958183613cc3565b9091906024356001600160a01b0316818460138211610635575b50506001600160a01b031692833b1561063157858995936105ef8296948b948b8f6040519b8c9a8b998a986323175ef160e11b8a52339260048b01613284565b03925af18015610626579085939291610609575b80610525565b8192935061061690612d2c565b6106235790818492610603565b80fd5b6040513d84823e3d90fd5b8580fd5b8195508093506106459250612c8a565b60601c9083601411610631576014019260131901908a806105af565b60405163b12d13eb60e01b8152600490fd5b630d0e30db60e41b825281806004818a7f00000000000000000000000000000000000000000000000000000000000000005af11561076d5760208260446106b8613b6c565b60405163a9059cbb60e01b81526004810191909152602481018b9052827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180610725575b15610713578593610517565b60405163fb7f507960e01b8152600490fd5b503d1561073b576001825114601f3d1116610707565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b1515610707565b50604051903d90823e3d90fd5b818080808a3403335af161078c612e80565b506104e95760405163b12d13eb60e01b8152600490fd5b604051631841b4e160e01b8152600490fd5b949094346107a3578061088b575b801561087e57305b61016435600160fc1b1615610846576107e48385613c93565b905061083457896107f8918a983390613a94565b156105175761082f610808613b6c565b897f0000000000000000000000000000000000000000000000000000000000000000613b1a565b610517565b6040516301577e8360e51b8152600490fd5b61086091968a6108568587613c93565b9390923390613a3f565b1561086c5786946107f8565b60405163478a520560e01b8152600490fd5b610886613b6c565b6107cb565b5060e435600160f71b1615156107c3565b503415156104d3565b6108af8183612c8a565b60601c918160141161092f57823b1561092f57839260148680946108fa8c958f8f8e918e916040519c8d9b8c9a8b9963adf38ba160e01b8b5260131901970195339260048b01613284565b03925af1801561092457908391156104985761091590612d2c565b610920578188610498565b5080fd5b6040513d85823e3d90fd5b8480fd5b61095e90897f0000000000000000000000000000000000000000000000000000000000000000613b1a565b8961048e565b61098c916109728b89613c62565b9290916001600160a01b0360243581169060643516613a3f565b610489575b604051630e1407e960e31b8152600490fd5b8161044c565b5061016435600160fe1b161515610444565b6109c58785613c2f565b6001600160a01b036024358116828460138211610a50575b50508181163b15610235578b60008f938f96610a1a8f91978f9885998f996040519c8d9b8c9a8b98630986bdd560e01b8a52339260048b01613284565b0393165af18015610a4457610a30575b5061040b565b610a3b919550612d2c565b6000938a610a2a565b6040513d6000823e3d90fd5b819550809450610a609250612c8a565b60601c9183601411610235576014019260131901918e806109dd565b60405163527b154b60e11b8152600490fd5b60018060a01b03602435166000526005602052604060002088600052602052888603196040600020556103fd565b604051637dd2d13b60e11b8152600490fd5b6040516323bc005f60e21b8152600490fd5b5060a435891415610371565b610144358103610b1757508a11610b05575b8a8061035d565b60405163fb8ae12960e01b8152600490fd5b610b2e90610b28610144358e6131fb565b926131fb565b1015610afe5760405163fb8ae12960e01b8152600490fd5b8397610339565b6101443597610b5f87868b89876138da565b97858911610bd3575b610164356001600160b81b031680610b81575b50610360565b610144358b03610baa578910610b98575b8a610b7b565b60405163240f51c960e11b8152600490fd5b610bbb8b610b28610144358d6131fb565b1115610b925760405163240f51c960e11b8152600490fd5b985096508396610be68786808987613991565b98610144358a1115610b68575b604051637f902a9360e01b8152600490fd5b610c0f8583613be2565b80610c1c575b5050610317565b610c269130612f31565b81610c4b575b5015610c39578880610c15565b604051635b314e0160e11b8152600490fd5b600191501489610c2c565b610c6160e435612f11565b610cb35760e43560a081811c8316901b6024356001600160a01b03161760009081526002602052604090205460789190911c90911603610ca15788610310565b6040516371f4582960e11b8152600490fd5b604051639e744e2560e01b8152600490fd5b6040516362b439dd60e11b8152600490fd5b905042118a6102fd565b604051636a6fed7f60e11b8152600490fd5b331614905089806102de565b60005260046000fd5b6001600160a01b03602435811691821591908215610ddc575b5050610dca5761016435600160fd1b166102aa57610d3f8684613cf4565b906014821015610d51575b50506102aa565b610d5b8282612c8a565b60601c82601411610235576014610d7b9360131901920190843091613356565b50610d8760e435612f11565b15610d94575b8080610d4a565b6000526005602052604060002086600052602052604060002054610db85788610d8d565b60405163c5f2be5160e01b8152600490fd5b604051635cd5d23360e01b8152600490fd5b9091506000906001600160ff1b0381166fa2a8918ca85bafe22016d0b997e4df5f600160ff1b038110610e17575b5050168114158a80610d21565b60209250600091608091604051918d835260ff1c601b0185830152610104356040830152606082015282805260015afa506000518b80610e0a565b3461023557602036600319011261023557610e6b612b65565b610e73613081565b6001600160a01b03908116908115610ec257600354826001600160601b0360a01b821617600355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b34610235576060366003190112610235576020610f1f610ef9612b65565b6001600160a01b031660243560a01b176000908152600260205260409020546044351490565b6040519015158152f35b346102355736600319016101608112610235576101001361023557610104356001600160401b03811161023557610f64903690600401612b7b565b610124359190600061014435610f7b61028d612f57565b91610f8583613194565b9360a43595868614611575575b5050610f9c613589565b610fa4613858565b9015610cff575060e4359169ffffffffffffffffffff8084168015918215611569575b505015610ce15764ffffffffff808460501c16801515908161155f575b50610cc557600160fa1b841661151a575b50600160ff1b958187161561148d57858810156114865787965b8761101d8160c43585613dd4565b996001600160b81b0385169182611449575b5050505b84161515908161143e575b50610ace5786860215610abc5761105483612f11565b156114105760018060a01b03602435166000526004602052604060002063ffffffff8460801c16600160ff8660781c161b918160005280602052604060002054918380841614610a7c57600052602052176040600020555b600160fc1b918383166113ac575b6001600160a01b03927f000000000000000000000000000000000000000000000000000000000000000080851693909260643586168581148061139d575b801561139757305b600160f81b8a161561136d576111168480613c62565b9050610834578c61112e9185948b6024351690613a94565b61135d575b610623575090898992866084351686811493848095611355575b156112cf575050509150506107a3578790600160f71b8516156112545750600080809350809261117b613b6c565b5af1611185612e80565b50156106615784915b600160fb1b166111ca575b5060406105597ffec331350fce78ba658e082a71da20ac9f8d798a99b3c79681c8440cbfe77e079261058295613349565b90506024351691823b1561023557600060405180946323175ef160e11b82528183816111fd878c8c338c600487016132ec565b03925af1908115610a445761055985604092610582967ffec331350fce78ba658e082a71da20ac9f8d798a99b3c79681c8440cbfe77e0795611245575b509550925050611199565b61124e90612d2c565b8961123a565b6004600080938193630d0e30db60e41b83525af115610a445760206000604461127b613b6c565b6040519063a9059cbb60e01b825260048201528a602482015282855af190816112ac575b501561071357849161118e565b90503d156112c75750600160005114601f3d11165b8761129f565b3b15156112c1565b90919293809599975094611345575b84156113375730925b161561131e57906112fa92913390613a94565b611305575b5061118e565b6113189088611312613b6c565b91613b1a565b876112ff565b61132b9397503390613a03565b1561086c5786936112fa565b61133f613b6c565b926112e7565b600160f71b8716151594506112de565b50600061114d565b611368338c87613b1a565b611133565b61138b91928d61137d8680613c62565b9390928c6024351690613a3f565b1561099157819061112e565b33611100565b50600160fe1b831615156110f8565b6024356001600160a01b0316803b156102355760008988928a838a6113e960405197889687958694630986bdd560e01b86523390600487016132ec565b03925af18015610a44576113fe575b506110ba565b6114089150612d2c565b6000886113f8565b60018060a01b03602435166000526005602052604060002084600052602052858503196040600020556110ac565b90508614158861103e565b8181036114615750508911610b05575b89808061102f565b610b2861146e928d6131fb565b10156114595760405163fb8ae12960e01b8152600490fd5b859661100f565b60c435968861149d818a85613dad565b98888a116114fc575b506001600160b81b03841690816114bf575b5050611033565b8a8181036114d75750508810610b98575b89806114b8565b610b286114e4928c6131fb565b11156114d05760405163240f51c960e11b8152600490fd5b9850985061150c87809984613dd4565b98808a11610bf3578a6114a6565b61152384612f11565b610cb35760a084811c8216901b6024356001600160a01b031617600090815260026020526040902054607885901c90911603610ca15787610ff5565b9050421189610fe4565b33161490508880610fc7565b6020600080936040519080630b135d3f60e11b958684528a6004850152604060248501528160448501526064840137606401906024356001600160a01b03165afa6115c8575b5015610dca578680610f92565b600051143d602014169050876115bb565b346102355760206115f66115ec36612ba8565b9092919230612f31565b8192919261160b575b50506040519015158152f35b10905082806115ff565b346102355760203660031901126102355761162e612b4f565b6001600160601b0360a01b8160a01b1633176000526002602052604060002060018154018091556001600160601b036040519216825260208201527f099133aefc2c2d1e56f8ef3622ec8e80979a0713fc9c4e1497740efcf809939660403392a2005b34610235576040366003190112610235576001600160a01b036116b2612b65565b16600052600560205260406000206024356000526020526020604060002054604051908152f35b34610235576020610f1f6116ec36612ba8565b91612eb0565b34610235576020366003190112610235576004356001600160401b0381116102355761172e6117276020923690600401612b7b565b9030612f31565b8161173f575b506040519015158152f35b90501582611734565b346102355761175f61175936612c4b565b91612f31565b901561177057602090604051908152f35b604051631f1b8f6160e01b8152600490fd5b346102355760008061179336612c4b565b90816040519283928337810184815203915af46117ae612e80565b6040805163032695f960e31b81529215156004840152602483015281906117d9906044830190612bdb565b0390fd5b34610235576040366003190112610235576117fc602435600435612da1565b005b36600319016101808112610235576101001361023557610144356101243560006101643561182d61028d612f57565b9061183782613194565b9260a43594858514611c94575b5061184d613589565b611855613858565b9015610cff575060e4359169ffffffffffffffffffff8084168015918215611c88575b505015610ce15764ffffffffff808460501c168015159081611c7e575b50610cc557600160fa1b8416611c39575b50600160ff1b9581871615611bac5785881015611ba55787965b876118ce8160c43585613dd4565b996001600160b81b0385169182611b68575b5050505b841615159081611b5d575b50610ace5786860215610abc5761190583612f11565b15611b2f5760018060a01b03602435166000526004602052604060002063ffffffff8460801c16600160ff8660781c161b918160005280602052604060002054918380841614610a7c57600052602052176040600020555b600160fc1b91838316611acb575b6001600160a01b03927f0000000000000000000000000000000000000000000000000000000000000000808516939092606435861685811480611abc575b8015611ab657305b600160f81b8a1615611a9a576119c78480613c62565b9050610834578c6119df9185948b6024351690613a94565b611a8a575b6106235750608435851691848314918280611a81575b15611a5257505050508734106107a3578790813411611a31575b600160f71b8516156112545750600080809350809261117b613b6c565b906000808080933403335af1611a45612e80565b5015610661578790611a14565b909192969450346107a35789968b9284611345578415611337573092161561131e57906112fa92913390613a94565b503415156119fa565b611a95338c87613b1a565b6119e4565b611aaa91928d61137d8680613c62565b156109915781906119df565b336119b1565b50600160fe1b831615156119a9565b6024356001600160a01b0316803b156102355760008988928a838a611b0860405197889687958694630986bdd560e01b86523390600487016132ec565b03925af18015610a4457611b1d575b5061196b565b611b279150612d2c565b600088611b17565b60018060a01b036024351660005260056020526040600020846000526020528585031960406000205561195d565b9050861415886118ef565b818103611b805750508911610b05575b8980806118e0565b610b28611b8d928d6131fb565b1015611b785760405163fb8ae12960e01b8152600490fd5b85966118c0565b60c4359688611bbc818a85613dad565b98888a11611c1b575b506001600160b81b0384169081611bde575b50506118e4565b8a818103611bf65750508810610b98575b8980611bd7565b610b28611c03928c6131fb565b1115611bef5760405163240f51c960e11b8152600490fd5b98509850611c2b87809984613dd4565b98808a11610bf3578a611bc5565b611c4284612f11565b610cb35760a084811c8216901b6024356001600160a01b031617600090815260026020526040902054607885901c90911603610ca157876118a6565b9050421189611895565b33161490508880611878565b6001600160a01b0360243581168015929091908315611cbb575b505050610dca5786611844565b919250906000906001600160ff1b0381166fa2a8918ca85bafe22016d0b997e4df5f600160ff1b038110611cf7575b5050161415878080611cae565b60209250600091608091604051918a835260ff1c601b0185830152610104356040830152606082015282805260015afa506000518980611cea565b34610235576000366003190112610235576003546040516001600160a01b039091168152602090f35b34610235576040366003190112610235576001600160401b0360043581811161023557611d8c903690600401612c1b565b909160243590811161023557611da6903690600401612c1b565b90818303611de45760005b838110611dba57005b80611dde611dcb6001938789612d7b565b35611dd7838787612d7b565b3590612da1565b01611db1565b604051631b2f9b3b60e31b8152600490fd5b3461023557600036600319011261023557611e307f00000000000000000000000000000000000000000000000000000000000000006135aa565b611e597f00000000000000000000000000000000000000000000000000000000000000006136cf565b6040516020808201928284106001600160401b03851117611f0057916020611eb38594611ea5979660405260008452604051978897600f60f81b895260e0858a015260e0890190612bdb565b908782036040890152612bdb565b91466060870152306080870152600060a087015285830360c0870152519182815201929160005b828110611ee957505050500390f35b835185528695509381019392810192600101611eda565b634e487b7160e01b600052604160045260246000fd5b3461023557600036600319011261023557611f2f613081565b611f37613589565b6003805460ff60a01b1916600160a01b1790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602090a1005b346102355761010080600319360112610235576042602091610120611f9b612f57565b91604051907f3af21ec5a20011b88d3b7b4ed7c806cef05a5980cf34974bcd53566a131f7e4c8252600486830137206040519161190160f01b83526002830152602282015220604051908152f35b34610235576020610f1f611ffc36612ba8565b91612cd3565b346102355760003660031901126102355761201b613081565b600380546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346102355760206120726115ec36612ba8565b819291926120865750506040519015158152f35b14905082806115ff565b3461023557600036600319011261023557602060ff60035460a01c166040519015158152f35b6040366003190112610235576001600160401b03600435818111610235576120e2903690600401612b7b565b91602435908111610235576120fb903690600401612b7b565b6121088484959395612c8a565b60601c918060141161023557600093849361212f9260131901916014019030903390613356565b508060405194853783305af43d6000833e15612149573d90f35b3d90fd5b3461023557366003190161018081126102355761010013610235576001600160401b036101043581811161023557612189903690600401612b7b565b9161016435908111610235576121a66121b0913690600401612b7b565b90610144356130ad565b9591926121c261028d96929596612f57565b946121cc86613194565b9360009360a43586146127e0575b50506121e4613589565b6121ee85836137b9565b9015610cff575069ffffffffffffffffffff8060e4351680159182156127d4575b505015610ce15764ffffffffff8060e43560501c1680151590816127ca575b50610cc55760e435600160fa1b1661277f575b5084612740575b61014435600160ff1b161561269b578361012435106000146126945761012435975b889761227988878c8a88613991565b99610144356001600160b81b03169081612652575b50505b60e435600160ff1b16151580612646575b610ace5789890215610abc576122b960e435612f11565b15612618576024356001600160a01b0316600090815260046020908152604080832060e435608081901c63ffffffff168552928190529220549190600160789190911c60ff161b80831614610a7c5763ffffffff60e43560801c16600052602052600160ff60e43560781c161b176040600020555b60e435600160fc1b16612563575b6064356001600160a01b039081167f00000000000000000000000000000000000000000000000000000000000000009091161480612551575b801561254b57305b8a60e435600160f81b161561252757506123978987613c62565b9050610834576123ba908b906001600160a01b0360243581169060643516613a94565b6124f6575b506013811161247b575b50506001600160a01b036084358116907f00000000000000000000000000000000000000000000000000000000000000001681148080612473575b1561242b575050866107a35760e435600160f71b161561067357818080808a610504613b6c565b90949080612462575b801561245557305b61014435600160fc1b1615610846576107e48385613c93565b61245d613b6c565b61243c565b5060e435600160f71b161515612434565b506000612404565b6124858183612c8a565b60601c918160141161092f57823b1561092f57839260148680946124d08c958f8f8e918e916040519c8d9b8c9a8b9963adf38ba160e01b8b5260131901970195339260048b01613284565b03925af1801561092457908391156123c9576124eb90612d2c565b6109205781886123c9565b61252190897f0000000000000000000000000000000000000000000000000000000000000000613b1a565b896123bf565b612535916109728b89613c62565b6123ba57604051630e1407e960e31b8152600490fd5b8161237d565b5061014435600160fe1b161515612375565b61256d8785613c2f565b6001600160a01b0360243581168284601382116125ec575b50508181163b15610235578b60008f938f966125c28f91978f9885998f996040519c8d9b8c9a8b98630986bdd560e01b8a52339260048b01613284565b0393165af18015610a44576125d8575b5061233c565b6125e3919550612d2c565b6000938a6125d2565b8195508094506125fc9250612c8a565b60601c9183601411610235576014019260131901918e80612585565b60018060a01b036024351660005260056020526040600020886000526020528886031960406000205561232e565b5060a4358914156122a2565b61012435810361266b57508a11610b05575b8a8061228e565b61267c90610b28610124358e6131fb565b10156126645760405163fb8ae12960e01b8152600490fd5b839761226a565b61012435976126ad87868b89876138da565b9785891161270f575b610144356001600160b81b0316806126cf575b50612291565b610124358b036126e6578910610b98575b8a6126c9565b6126f78b610b28610124358d6131fb565b11156126e05760405163240f51c960e11b8152600490fd5b9850965083966127228786808987613991565b98610124358a11156126b657604051637f902a9360e01b8152600490fd5b61274a8583613be2565b80612757575b5050612248565b6127619130612f31565b81612774575b5015610c39578880612750565b600191501489612767565b61278a60e435612f11565b610cb35760e43560a081811c8316901b6024356001600160a01b03161760009081526002602052604090205460789190911c90911603610ca15788612241565b905042118a61222e565b3316149050898061220f565b6020600080936040519080630b135d3f60e11b958684528d6004850152604060248501528160448501526064840137606401906024356001600160a01b03165afa612833575b5015610dca5788806121da565b600051143d60201416905089612826565b346102355760206128576115ec36612ba8565b8192919261286b5750506040519015158152f35b11905082806115ff565b34610235576040366003190112610235576001600160a01b03612896612b65565b166000526005602052604060002060243560005260205260406000205480156128c55760209060405190198152f35b60405163aa3eef9560e01b8152600490fd5b34610235576000366003190112610235576128f0613081565b60035460ff8160a01c16156129375760ff60a01b19166003556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a1005b604051638dfc202b60e01b8152600490fd5b34610235576000366003190112610235576020612964612f57565b604051908152f35b34610235576020366003190112610235576004356001600160401b038111610235576129a16117276020923690600401612b7b565b816129b157506040519015158152f35b600191501482611734565b34610235576040366003190112610235576001600160a01b036129dd612b65565b166000526004602052604060002060243560081c6000526020526020604060002054604051908152f35b3461023557604036600319011261023557612a20612b4f565b60243580158015612aa4575b612a92576001600160601b0360a01b8260a01b16331760005260026020526040600020908154018091556001600160601b036040519216825260208201527f099133aefc2c2d1e56f8ef3622ec8e80979a0713fc9c4e1497740efcf809939660403392a2005b60405163555fbbbf60e01b8152600490fd5b5060ff8111612a2c565b346102355760403660031901126102355760043590612acc82612f11565b15612b40575033600052600460205260406000209063ffffffff8160801c169182600052602052604060002090600160ff6024359260781c161b1781541780915560405191825260208201527fcda0f7e73d07bdb14b141f2cf4745926629a1b63e7c6a3dd8a80232cb459a85060403392a2005b63435ffd6560e11b8152600490fd5b600435906001600160601b038216820361023557565b600435906001600160a01b038216820361023557565b9181601f84011215610235578235916001600160401b038311610235576020838186019501011161023557565b9060406003198301126102355760043591602435906001600160401b03821161023557612bd791600401612b7b565b9091565b919082519283825260005b848110612c07575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201612be6565b9181601f84011215610235578235916001600160401b038311610235576020808501948460051b01011161023557565b906040600319830112610235576004356001600160a01b03811681036102355791602435906001600160401b03821161023557612bd791600401612b7b565b6bffffffffffffffffffffffff199035818116939260148110612cac57505050565b60140360031b82901b16169150565b90939293848311610235578411610235578101920390565b9290919260005b63ffffffff8216908115612d215761172782612cf7928888612cbb565b81612d16575b50612d0c579060201c90612cda565b5050915050600190565b600191501438612cfd565b505050915050600090565b6001600160401b038111611f0057604052565b604081019081106001600160401b03821117611f0057604052565b90601f801991011681019081106001600160401b03821117611f0057604052565b9190811015612d8b5760051b0190565b634e487b7160e01b600052603260045260246000fd5b90612dab82612f11565b15612e1a575033600052600460205260406000209063ffffffff8160801c169182600052602052600160ff60406000209260781c161b81541780915560405191825260208201527fcda0f7e73d07bdb14b141f2cf4745926629a1b63e7c6a3dd8a80232cb459a85060403392a2565b7f5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d915060209033600052600582526040600020816000528252600019604060002055604051908152a1565b6001600160401b038111611f0057601f01601f191660200190565b3d15612eab573d90612e9182612e65565b91612e9f6040519384612d5a565b82523d6000602084013e565b606090565b9290919260009060005b63ffffffff8216908115612f055761172782612ed7928989612cbb565b9015908115612ef9575b50612ef0579060201c90612eba565b50509150915090565b60019150141538612ee1565b50505050915050600190565b600160ff1b81161580159190612f25575090565b600160fe1b1615919050565b916000906020928294826040519283375afa60203d14169182612f5057565b6000519150565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480613058575b15612fb2577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815260c081018181106001600160401b03821117611f005760405251902090565b507f00000000000000000000000000000000000000000000000000000000000000004614612f89565b6003546001600160a01b0316330361309557565b60405163118cdaa760e01b8152336004820152602490fd5b90929190600160fb1b81161561313a576130c78285612c8a565b60601c9382601411610235576014019160131901925b62ffffff60e083901c811694851561312a5780861161023557613104908596818197612cbb565b919091935b60c81c1692831561311e578311610235579190565b50509050600090600090565b9293909450600094600094613109565b339391926130dd565b6042906101206040517f3af21ec5a20011b88d3b7b4ed7c806cef05a5980cf34974bcd53566a131f7e4c815261010060046020830137206040519161190160f01b8352600283015260228201522090565b61319f60e435612f11565b156131c4575060a435905b81156131b257565b604051637b8fded160e11b8152600490fd5b60018060a01b036024351660005260056020526040600020906000526020526131f560406000205460a435906137a8565b906131aa565b8181029291811591840414171561320e57565b634e487b7160e01b600052601160045260246000fd5b6004358152602435602082015260443560408201526064356060820152608435608082015260a43560a082015260c43560c082015260e060e435910152565b908060209392818452848401376000828201840152601f01601f1916010190565b94916132e9999794916132b091999794996101e06132a189613224565b806101008a0152880191613263565b6101208601989098526001600160a01b03166101408501526101608401526101808301526101a08201528084036101c090910152613263565b90565b93600093610220969293856101e061330389613224565b806101008a01528801526102009461012088015260018060a01b03166101408701526101608601526101808501526101a0840152806101c0840152820152016000815290565b9190820391821161320e57565b919093600094938594613367613b8d565b906040519484918260641461352457826048146134b3578260e01461349157826101001461346d57826060146133df575050610160146133be5750639fd5a6cf60e01b8352849160049181908584013701925af190565b6302b67b5760e41b84526101649450859250906101609060048501375af190565b88955060409250906101649760209495926302b67b5760e41b8952600489015260248801526014826050890137851965ffffffffffff9181601485013560e01c01831660648a0152601884013560e01c60848a015260a4890152601c83013560e01c011660c487015261010060e48701528161010487015282808201610124880137016101448501375af190565b50506323f2ebc360e21b8552506101049486935091610100915060048501375af190565b505063d505accf60e01b85525060e4948693509160e0915060048501375af190565b909150879450610104969392506323f2ebc360e21b86526004860152602485015260206008602883013592803560e01c60448801528519600482013560e01c016064880152600160848801528360ff1c601b0160a48801520160c48601376001600160ff1b031660e48401525af190565b90915087945060e49693925063d505accf60e01b865260048601526024850152602060246044830135928281604489013785198382013560e01c0160648801528360ff1c601b0160848801520160a48601376001600160ff1b031660c48401525af190565b60ff60035460a01c1661359857565b60405163d93c066560e01b8152600490fd5b60ff81146135e85760ff811690601f82116135d657604051916135cc83612d3f565b8252602082015290565b604051632cd44ac360e21b8152600490fd5b50604051600080549060018260011c90600184169384156136c5575b60209485841081146136b157838752869493929181156136915750600114613635575b50506132e992500382612d5a565b60008080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56395935091905b8183106136795750506132e993508201013880613627565b85548784018501529485019486945091830191613661565b9150506132e994925060ff191682840152151560051b8201013880613627565b634e487b7160e01b85526022600452602485fd5b91607f1691613604565b60ff81146136f15760ff811690601f82116135d657604051916135cc83612d3f565b506040516000600190600154918260011c906001841693841561379e575b60209485841081146136b15783875286949392918115613691575060011461373f5750506132e992500382612d5a565b9093915060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6936000915b8183106137865750506132e993508201013880613627565b8554878401850152948501948694509183019161376e565b91607f169161370f565b9081156137b457501990565b905090565b9060e435600160f91b1615613843578015613833576137d781612e65565b906137e56040519283612d5a565b8082526020820192368282011161023557816000926020928637830101525190206001600160a01b0390811660043590911603613825575b600190600090565b60009063dc11ee6b60e01b90565b5060009163b2d25e4960e01b9150565b90501561381d576000906374896a7b60e01b90565b600060e435600160f91b1615613874579063b2d25e4960e01b90565b50600190600090565b93906138a7906132e99997949896936101c061389888613224565b80610100890152870191613263565b6101208501979097526001600160a01b03166101408401526101608301526101808201528084036101a090910152613263565b939190926138e88486613d27565b9092811561397b576138fa8285612c8a565b60601c938260141161023557602096601494613936936040519a8b998a988998631d9671c360e01b8a5260131901960194339260048a0161387d565b03915afa908115610a445760009161394c575090565b90506020813d602011613973575b8161396760209383612d5a565b81010312610235575190565b3d915061395a565b9450505050506132e9915060c43560a435613dad565b9391909261399f8486613d5a565b909281156139ed576139b18285612c8a565b60601c938260141161023557602096601494613936936040519a8b998a9889986301afff1560e71b8a5260131901960194339260048a0161387d565b9450505050506132e9915060c43560a435613dd4565b9060006064926020958295604051946323b872dd60e01b86526004860152602485015260448401525af1600160005114601f3d11163d15171690565b92948060009581602098889596604051976323b872dd60e01b8952600489015260248801526044870152613a88575b5050606401925af1600160005114601f3d11163d15171690565b60648501378038613a6e565b9291906001600160a01b038311613b0857608490613ab0613b8d565b94600094859460405193631b63c28b60e11b8552600485015260248401526044830152606482015282855af19081613afd575b5015613aeb57565b60405163f405907160e01b8152600490fd5b90503b151538613ae3565b604051638112e11960e01b8152600490fd5b916024926000809481808094632e1a7d4d60e01b8252876004525af11561062657306001600160a01b03821603613b5057505050565b8280809381935af115613b605750565b604051903d90823e3d90fd5b6001600160a01b036044358116908115613b84575090565b90506024351690565b468061014414613bce578061012c14613bce5761010414613bbb576e22d473030f116ddee9f6b43ac78ba390565b6e225e31d15943971f47ad3022f714fa90565b506e225e31d15943971f47ad3022f714fa90565b91909160208310613c265780359063ffffffff808360601c169260801c1693601f19018411613c15578101602001920390565b6309605a0160e41b60005260046000fd5b50600091508190565b91909160208310613c265780359063ffffffff808360a01c169260c01c1693601f19018411613c15578101602001920390565b91909160208310613c265780359063ffffffff918060201b8316921693601f19018411613c15578101602001920390565b91909160208310613c265780359063ffffffff8083169260201c1693601f19018411613c15578101602001920390565b91909160208310613c265780359063ffffffff8260c01c169160e01c93601f19018411613c15578101602001920390565b91909160208310613c265780359063ffffffff808360801c169260a01c1693601f19018411613c15578101602001920390565b91909160208310613c265780359063ffffffff808360201c169260401c1693601f19018411613c15578101602001920390565b91909160208310613c265780359063ffffffff808360401c169260601c1693601f19018411613c15578101602001920390565b8115613d97570490565b634e487b7160e01b600052601260045260246000fd5b80831760801c15613dca57613dc5906132e9936131fb565b613d8d565b6132e99202613d8d565b9181811760801c15613e0a5790613dea916131fb565b9080820180921161320e57600019820191821161320e576132e991613d8d565b6132e9929102810160001901613d8d56fea264697066735822122023596ff0556a06e3cace671a66103ff85982fe0a0f6b6ae30b3d3b6335c889e864736f6c63430008170033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "BitInvalidatedOrder()": [
        {
          "details": "The error is thrown when an attempt is made to invalidate an already invalidated entity."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "EthDepositRejected()": [
        {
          "details": "Error thrown when an ETH deposit from an EOA is attempted."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "RemainingInvalidatedOrder()": [
        {
          "details": "The error is thrown when an attempt is made to invalidate an already invalidated entity."
        }
      ]
    },
    "events": {
      "BitInvalidatorUpdated(address,uint256,uint256)": {
        "params": {
          "maker": "Maker address",
          "slotIndex": "Slot index that was updated",
          "slotValue": "New slot value"
        }
      },
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "OrderCancelled(bytes32)": {
        "params": {
          "orderHash": "Hash of the order"
        }
      },
      "OrderFilled(bytes32,uint256)": {
        "params": {
          "orderHash": "Hash of the order",
          "remainingAmount": "Amount of the maker asset that remains to be filled"
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Returns the domain separator for the current chain (EIP-712)"
      },
      "and(uint256,bytes)": {
        "returns": {
          "_0": "Result True if calls to all targets returned True. Otherwise, false"
        }
      },
      "arbitraryStaticCall(address,bytes)": {
        "returns": {
          "_0": "Result Bytes transmuted to uint256"
        }
      },
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "epochEquals(address,uint256,uint256)": {
        "returns": {
          "_0": "Result True if `maker` has specified epoch. Otherwise, false"
        }
      },
      "eq(uint256,bytes)": {
        "params": {
          "value": "Value to test"
        },
        "returns": {
          "_0": "Result True if call to target returns the same value as `value`. Otherwise, false"
        }
      },
      "gt(uint256,bytes)": {
        "params": {
          "value": "Value to test"
        },
        "returns": {
          "_0": "Result True if call to target returns value which is bigger than `value`. Otherwise, false"
        }
      },
      "lt(uint256,bytes)": {
        "params": {
          "value": "Value to test"
        },
        "returns": {
          "_0": "Result True if call to target returns value which is lower than `value`. Otherwise, false"
        }
      },
      "not(bytes)": {
        "returns": {
          "_0": "Result True if call to target returns 0. Otherwise, false"
        }
      },
      "or(uint256,bytes)": {
        "returns": {
          "_0": "Result True if call to any target returned True. Otherwise, false"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "permitAndCall(bytes,bytes)": {
        "params": {
          "action": "The data representing the action to be executed after the permit.",
          "permit": "ERC20 token address (20 bytes) concatenated with the permit data, allowing this contract to spend the token. Format: [token address (20 bytes)][permit data]"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "##1inch Limit Order Protocol v4",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BitInvalidatorUpdated(address,uint256,uint256)": {
        "notice": "Emitted when order with `useBitInvalidator` gets cancelled"
      },
      "OrderCancelled(bytes32)": {
        "notice": "Emitted when order without `useBitInvalidator` gets cancelled"
      },
      "OrderFilled(bytes32,uint256)": {
        "notice": "Emitted when order gets filled"
      }
    },
    "kind": "user",
    "methods": {
      "advanceEpoch(uint96,uint256)": {
        "notice": "Advances nonce by specified amount"
      },
      "and(uint256,bytes)": {
        "notice": "Calls every target with corresponding data"
      },
      "arbitraryStaticCall(address,bytes)": {
        "notice": "Performs an arbitrary call to target with data"
      },
      "bitInvalidatorForOrder(address,uint256)": {
        "notice": "See {IOrderMixin-bitInvalidatorForOrder}."
      },
      "bitsInvalidateForOrder(uint256,uint256)": {
        "notice": "See {IOrderMixin-bitsInvalidateForOrder}."
      },
      "cancelOrder(uint256,bytes32)": {
        "notice": "See {IOrderMixin-cancelOrder}."
      },
      "cancelOrders(uint256[],bytes32[])": {
        "notice": "See {IOrderMixin-cancelOrders}."
      },
      "checkPredicate(bytes)": {
        "notice": "See {IOrderMixin-checkPredicate}."
      },
      "epoch(address,uint96)": {
        "notice": "Returns nonce for `maker` and `series`"
      },
      "epochEquals(address,uint256,uint256)": {
        "notice": "Checks if `maker` has specified `makerEpoch` for `series`"
      },
      "eq(uint256,bytes)": {
        "notice": "Calls target with specified data and tests if it's equal to the value"
      },
      "fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)": {
        "notice": "See {IOrderMixin-fillContractOrder}."
      },
      "fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)": {
        "notice": "See {IOrderMixin-fillContractOrderArgs}."
      },
      "fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)": {
        "notice": "See {IOrderMixin-fillOrder}."
      },
      "fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)": {
        "notice": "See {IOrderMixin-fillOrderArgs}."
      },
      "gt(uint256,bytes)": {
        "notice": "Calls target with specified data and tests if it's bigger than value"
      },
      "hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "See {IOrderMixin-hashOrder}."
      },
      "increaseEpoch(uint96)": {
        "notice": "Advances nonce by one"
      },
      "lt(uint256,bytes)": {
        "notice": "Calls target with specified data and tests if it's lower than value"
      },
      "not(bytes)": {
        "notice": "Calls target with specified data and tests if it's equal to 0"
      },
      "or(uint256,bytes)": {
        "notice": "Calls every target with corresponding data"
      },
      "pause()": {
        "notice": "Pauses all the trading functionality in the contract."
      },
      "permitAndCall(bytes,bytes)": {
        "notice": "Executes a permit for an ERC20 token and then a specified action in a single transaction."
      },
      "rawRemainingInvalidatorForOrder(address,bytes32)": {
        "notice": "See {IOrderMixin-rawRemainingInvalidatorForOrder}."
      },
      "remainingInvalidatorForOrder(address,bytes32)": {
        "notice": "See {IOrderMixin-remainingInvalidatorForOrder}."
      },
      "simulate(address,bytes)": {
        "notice": "See {IOrderMixin-simulate}."
      },
      "unpause()": {
        "notice": "Unpauses all the trading functionality in the contract."
      }
    },
    "notice": "Limit order protocol provides two different order types - Regular Limit Order - RFQ Order Both types provide similar order-fulfilling functionality. The difference is that regular order offers more customization options and features, while RFQ order is extremely gas efficient but without ability to customize. Regular limit order additionally supports - Execution predicates. Conditions for order execution are set with predicates. For example, expiration timestamp or block number, price for stop loss or take profit strategies. - Callbacks to notify maker on order execution See [OrderMixin](OrderMixin.md) for more details. RFQ orders supports - Expiration time - Cancelation by order id - Partial Fill (only once) See [OrderMixin](OrderMixin.md) for more details.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7841,
        "contract": "contracts/1inch/limit-order-protocol/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 7843,
        "contract": "contracts/1inch/limit-order-protocol/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 19863,
        "contract": "contracts/1inch/limit-order-protocol/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "_epochs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5107,
        "contract": "contracts/1inch/limit-order-protocol/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6766,
        "contract": "contracts/1inch/limit-order-protocol/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "_paused",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 14490,
        "contract": "contracts/1inch/limit-order-protocol/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "_bitInvalidator",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Data)20721_storage)"
      },
      {
        "astId": 14497,
        "contract": "contracts/1inch/limit-order-protocol/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "_remainingInvalidator",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_userDefinedValueType(RemainingInvalidator)21490))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_userDefinedValueType(RemainingInvalidator)21490))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => RemainingInvalidator))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_userDefinedValueType(RemainingInvalidator)21490)"
      },
      "t_mapping(t_address,t_struct(Data)20721_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BitInvalidatorLib.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)20721_storage"
      },
      "t_mapping(t_bytes32,t_userDefinedValueType(RemainingInvalidator)21490)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => RemainingInvalidator)",
        "numberOfBytes": "32",
        "value": "t_userDefinedValueType(RemainingInvalidator)21490"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Data)20721_storage": {
        "encoding": "inplace",
        "label": "struct BitInvalidatorLib.Data",
        "members": [
          {
            "astId": 20720,
            "contract": "contracts/1inch/limit-order-protocol/LimitOrderProtocol.sol:LimitOrderProtocol",
            "label": "_raw",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(RemainingInvalidator)21490": {
        "encoding": "inplace",
        "label": "RemainingInvalidator",
        "numberOfBytes": "32"
      }
    }
  }
}